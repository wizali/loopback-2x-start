{"version":3,"sources":["phoebe.js","phoebe.utils.js","Phoebe.cache.js","Phoebe.controller.js","Phoebe.dict.js","phoebe.service.js"],"names":["window","angular","initConfigurationPhase","initOperationPhase","$phoebe","initList","this","$get","preinit","module","config","isDefined","dependencies","cons","context","constant","value","provider","run","directive","$compile","restrict","scope","transclude","compile","tEle","console","log","html","pre","iEle","post","append","template","$inject","dateFormatFilter","DateFormat","val","format","reg","RegExp","test","toString","length","getDate","measureFormatFilter","MeasureFormat","decimals","startUnit","unit","Number","result","toByteConv","toFrequencyConv","DateFormatProvider","toSeconds","ms","Math","floor","date","str","Date","o","M+","getMonth","d+","h+","getHours","m+","getMinutes","s+","getSeconds","q+","S","getMilliseconds","T","getTime","replace","$1","getFullYear","substr","k","getTodayTimeInterval","sdate","setHours","startTime","cdate","endTime","getMonthTimeInterval","setDate","setMonth","getYearTimeInterval","getWeekTimeInterval","issunday","getDay","MeasureFormatProvider","toUtilization","num","toFixed","sizeConversion","size","targetUnit","units","theUnit","indexOf","mapService","mapFactory","keys","values","put","key","hasOwnKey","push","get","remove","index","splice","each","callback","len","i","entrys","Array","element","sortASC","sort","a","b","sortDESC","hasOwnProperty","clear","isEmpty","filter","factory","undefined","loadingDictionary","dicts","PhoebeDict","dataProvider","broadcastEvent","isArray","preload","success","data","forEach","item","paramName","getForeignKey","Event","DICT_LOADED","error","loadingOptionData","options","PhoebeResource","q","resoure","vals","opt","modelName","model","match","PK","name","id","wherestr","where","trigger","promise","query","datalist","pkfield","all","then","OPTION_LOADED","createCrudMethod","dataSourceName","selectedItems","broadcast","primaryKeyField","selectedHandler","fkval","optionName","includeName","selectedItem","linkname","addHandler","resetHandler","response","optype","ADDING","MODEL_OPERATION","modifyHandler","itemIndex","copy","MODIFYING","savingHandler","SAVING","beforeEvent","defaultPrevented","saveHandler","save","include","isModify","unshift","SAVED","removeHandler","REMOVING","deleteHandler","delete","msg","DELETED","markSelectedHandler","exists","batchRemoveHandler","BATCH_REMOVING","batchDeleteHandler","idx","queryDataHandler","c","paginObj","pagination","queryObj","e","page","rows","limit","skip","MODEL_LOADED","count","RESET","methodNames","Add","Modify","Saving","Save","Reset","Remove","Delete","MarkSelected","BatchRemove","BatchDelete","QueryData","callName","setSelected","phoebeControllerService","$q","type","$broadcast","createModel","modelResource","isMultiple","interface","face","setInterface","openInterface","scopeSource","isObject","$dataProvider","$model","$resoure","prototype","BATCH_DELETED","service","loadDataDictionary","dictlist","existingList","err","or","hasOwnDictionary","dictCache","temp","dictForeignKey","dictResource","errorHandler","list","fun","getDictionaryValue","dict","showfield","valueField","opts","keyField","dictName","PhoebeDictFactory","dictConfig","mainModel","foreignKey","isString","getDict","getDictValue","dictFormatFilter","formatWhereString","fkid","hasmany","logic","Object","and","neq","between","field","order","isNumber","like","lt","gt","formatModelName","apiname","inflectionPluralize","word","inflection","pluralize","concurrentHanler","reslist","res","status","errs","chainRequest","successHandler","er","configuration","httpService","$http","find","apistr","apiURL","serverUrl","create","addlist","apiurl","update","updatelist","updateItem","destroy","destroyIdlist","getDestroyListPromise","removelist","removeitem","poie","successPromise","removeList","statuslist","customInterface","method","isPath","reqdata","request","toLowerCase","HttpServiceFactory","api","hasOwnResource","url","resourceList","PhoebeHttpService","clearSaveData","params","clearedList","param","ResourceFactory","PKField","items","ids","parent","cfg","interfaceName","reqApiUrl","methodval","isPathParam","path"],"mappings":"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","file":"phoebe.min.js","sourcesContent":["/**\n * Created by felix on 10/17/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    /**\n     * Some dependent module of the phoebe.\n     * - Please note that the loading sequence.\n     * - You sould define it like this: {mainModuleName}.{subModuleName}\n     * @type {string[]}\n     */\n    var dependencies = [\n        'phoebe.utils',\n        'phoebe.httpService',\n        'phoebe.resource',\n        'phoebe.dict',\n        'phoebe.controller',\n    ];\n\n    /**\n     * Some of the global static constants of the phoebe.\n     * - These of the constants value are can't be changed.\n     * - These values are often used in configuration phase.\n     * - You sould define it like this: {parameterName} : {parameterValue}\n     * @type {{}}\n     */\n    var cons = {};\n\n    /**\n     * Some global variables of the phoebe.\n     * - These of the variables are can be changed.\n     * - These values are often used in operation phase.\n     * - You sould define it like this: {parameterName} : {parameterValue}\n     * @type {{}}\n     */\n    var context = {};\n\n\n    /**\n     * Sign up for a core module of the phoebe on the angular.\n     */\n    angular.module('phoebe', dependencies).constant('PhoebeCons', cons).value('PhoebeContext', context).\n        config(initConfigurationPhase).\n        provider('$phoebe', $phoebe).\n        run(initOperationPhase).\n        directive('levelOne',['$compile',function($compile){\n            return {\n                restrict:'E',\n                scope:true,\n                transclude: 'tEle',\n                compile:function(tEle,tAttrs,trans){\n                    console.log('compile→'+'levelOne'+tEle.html());\n                    return {\n                        pre:function(scope,iEle,iAttrs){\n                            console.log('pre→'+'levelOne'+iEle.html());\n                        },\n                        post:function(scope,iEle,iAttrs){\n                            iEle.append('<level:two></level:two>');\n                            $compile(iEle);\n                            console.log('post→'+'levelOne'+iEle.html());\n                        }\n                    };\n                }\n            };\n        }]).directive('levelTwo',function(){\n        return {\n            restrict:'E',\n            scope: true,\n            transclude: 'tEle',\n            compile:function(tEle,tAttrs,trans){\n                tEle.append('<level:three></level:three>');\n                console.log('compile→'+'levelTwo'+tEle.html());\n                return {\n                    pre:function(scope,iEle,iAttrs){\n                        console.log('pre→'+'levelTwo'+iEle.html());\n                    },\n                    post:function(scope,iEle,iAttrs){\n                        console.log('post→'+'levelTwo'+iEle.html());\n                    }\n                };\n            }\n        };\n    }).directive('levelThree',function(){\n        return {\n            restrict:'E',\n            template    : 'hello,111111',\n            scope:true,\n            transclude: 'tEle',\n            compile:function(tEle,tAttrs,trans){\n                console.log('compile→'+'levelThree'+tEle.html());\n                return {\n                    pre:function(scope,iEle,iAttrs){\n                        console.log('pre→'+'levelThree'+iEle.html());\n                    },\n                    post:function(scope,iEle,iAttrs){\n                        console.log('post→'+'levelThree'+iEle.html());\n                    }\n                };\n            }\n        };\n    });\n\n    /**\n     * Perform the configuration phase of the work.\n     */\n    \n    function initConfigurationPhase () {\n\n    }\n    initConfigurationPhase.$inject = [];\n\n    /**\n     * Perform the configuration phase of the work.\n     */\n    initOperationPhase.$inject = [];\n    function initOperationPhase () {\n\n    }\n\n    /**\n     * Create Phoebe's service.\n     */\n    $phoebe.$inject = [];\n    function $phoebe(){\n        /**\n         * Cache configuration information.\n         * @type {{}}\n         */\n        var initList = {};\n        this.$get = function(){\n            return initList;\n        };\n\n        /**\n         * When phoebe start, inject the necessary configuration information.\n         * The injection process can only be done in the config method.\n         * @param module\n         * @param config\n         * @returns {$phoebe}\n         */\n        this.preinit = function(module, config){\n            // Save the config info.\n            if(angular.isDefined(module) && angular.isDefined(config)){\n                initList[module] = config;\n            }\n            return this;\n        };\n    }\n\n})(window, window.angular);","/**\n * Created by felix on 10/17/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    /**\n     * Sign up for a sub module of the phoebe on the angular.\n     * - The client universal tool.\n     */\n    angular.module('phoebe.utils', []).\n        provider('DateFormat'    , DateFormatProvider).\n        provider('MeasureFormat' , MeasureFormatProvider).\n        filter('dateFormat'      , dateFormatFilter).\n        filter('measureFormat'   , measureFormatFilter).\n        factory('Map',             mapService);\n\n    /**\n     * 日期转换，于date过滤器的唯一区别，就是该日期，支持10位自1970年的秒数转换\n     */\n    dateFormatFilter.$inject = ['DateFormat'];\n    function dateFormatFilter(DateFormat) {\n        return function (val, format) {\n            if (!format || '') format = 'yyyy-MM-dd';\n            var reg = new RegExp(\"^[0-9]*$\");\n            if (reg.test(val) && val.toString().length === 10) {\n                val = val * 1000;\n            }\n            return DateFormat.getDate(val, format);\n        };\n    }\n\n    /**\n     * 大小计算，目前支持两种单位，byte于hz的大小转换，其中，只处理数字，对于由字母组成的值则原样输出\n     */\n    measureFormatFilter.$inject = ['MeasureFormat'];\n    function measureFormatFilter(MeasureFormat) {\n        return function (val, decimals, startUnit, unit) {\n            val = Number(val);\n            unit = (unit) ? unit : 'byte';\n            decimals = (decimals) ? decimals : 1;\n            var result;\n            var reg = new RegExp(\"^[0-9]*$\");\n            if (reg.test(val)) {\n                switch (unit) {\n                    case 'byte' :\n                        result = MeasureFormat.toByteConv(val, startUnit, decimals);\n                        break;\n                    case 'hz'   :\n                        result = MeasureFormat.toFrequencyConv(val, startUnit, decimals);\n                        break;\n                }\n            } else {\n                result = val;\n            }\n            return result;\n        };\n    }\n\n    /**\n     * 日期格式化工具\n     * @constructor\n     */\n    function DateFormatProvider () {\n        /**\n         * Get a instance by this method.\n         * @returns {*}\n         */\n        this.$get = function () {\n            return this;\n        };\n        /**\n         * Format to seconds.\n         * @param ms - 传入毫秒数或秒数\n         * @returns {*}\n         */\n        this.toSeconds = function (ms) {\n            if (!ms) return 0;\n            if (ms.toString().length == 13) {\n                ms = Math.floor(ms / 1000);\n            } else if (ms.toString().length == 10) {\n                ms = ms * 1000;\n            }\n            return ms;\n        };\n        /**\n         * 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，\n         * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\n         * 例子：\n         * (new Date()).Format(\"yyyy-MM-dd hh:mm:ss.S\") ==> 2006-07-02 08:09:04.423\n         * (new Date()).Format(\"yyyy-M-d h:m:s.S\")      ==> 2006-7-2 8:9:4.18\n         * @param date  , 传入的日期对象或日期字符串或毫秒数\n         * @param str   , 日期的格式\n         * @returns String\n         */\n        this.getDate = function (date, str) {\n            //\n            if (date) {\n                date = new Date(date);\n            } else {\n                date = new Date();\n            }\n            //\n            if (!str)  str = \"yyyy-MM-dd hh:mm:ss.S [T]\";\n\n            var o = {\n                \"M+\": date.getMonth() + 1,                 //月份\n                \"d+\": date.getDate(),                    //日\n                \"h+\": date.getHours(),                   //小时\n                \"m+\": date.getMinutes(),                 //分\n                \"s+\": date.getSeconds(),                 //秒\n                \"q+\": Math.floor((date.getMonth() + 3) / 3), //季度\n                \"S\": date.getMilliseconds(),            //毫秒\n                \"T\": date.getTime()                     //自1970年以来的毫秒数\n            };\n            if (/(y+)/.test(str))\n                str = str.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n            for (var k in o) {\n                if (new RegExp(\"(\" + k + \")\").test(str))\n                    str = str.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n            }\n            return str;\n        };\n        /**\n         * Get the today of the time-interval.\n         * @returns {{}}\n         */\n        this.getTodayTimeInterval = function () {\n            var result = {};\n            // get 0 o'clock\n            var sdate = new Date();\n            sdate.setHours(0, 0, 0, 0);\n            result.startTime = sdate.getTime();\n            //console.log(sdate.getFullYear(),sdate.getMonth()+1,sdate.getDate(),sdate.getHours(),sdate.getMinutes(),sdate.getSeconds(),sdate.getMilliseconds());\n            // get 24 o'clock\n            var cdate = new Date();\n            cdate.setHours(24, 0, 0, 0);\n            result.endTime = cdate.getTime();\n            //console.log(cdate.getFullYear(),cdate.getMonth()+1,cdate.getDate(),cdate.getHours(),cdate.getMinutes(),cdate.getSeconds(),cdate.getMilliseconds());\n            return result;\n        };\n        /**\n         * Get first and last days of the this month.\n         * @returns {{}}\n         */\n        this.getMonthTimeInterval = function () {\n            var result = {};\n            // get the first day of this month.\n            var sdate = new Date();\n            sdate.setDate(1);\n            sdate.setHours(0, 0, 0, 0);\n            result.startTime = sdate.getTime();\n            //console.logend(sdate.getFullYear(),sdate.getMonth()+1,sdate.getDate(),sdate.getHours(),sdate.getMinutes(),sdate.getSeconds(),sdate.getMilliseconds());\n            // get the last day of this month.\n            var cdate = new Date();\n            cdate.setMonth(cdate.getMonth() + 1, 0);\n            cdate.setHours(24, 0, 0, 0);\n            result.endTime = cdate.getTime();\n            //console.log(cdate.getFullYear(),cdate.getMonth()+1,cdate.getDate(),cdate.getHours(),cdate.getMinutes(),cdate.getSeconds(),cdate.getMilliseconds());\n            return result;\n        };\n        /**\n         * Get first and last days of the this year.\n         * @returns {{}}\n         */\n        this.getYearTimeInterval = function () {\n            var result = {};\n            // get the first day of this year.\n            var sdate = new Date();\n            sdate.setMonth(0, 1);\n            sdate.setHours(0, 0, 0, 0);\n            result.startTime = sdate.getTime();\n            //console.log(sdate.getFullYear(),sdate.getMonth()+1,sdate.getDate(),sdate.getHours(),sdate.getMinutes(),sdate.getSeconds(),sdate.getMilliseconds());\n            // get the last day of this year.\n            var cdate = new Date();\n            cdate.setMonth(12, 0);\n            cdate.setHours(24, 0, 0, 0);\n            result.endTime = cdate.getTime();\n            //console.log(cdate.getFullYear(),cdate.getMonth()+1,cdate.getDate(),cdate.getHours(),cdate.getMinutes(),cdate.getSeconds(),cdate.getMilliseconds());\n            return result;\n        };\n        // Get weekdate.\n        /**\n         * Get first and last days of the this week.\n         * @returns {{}}\n         */\n        this.getWeekTimeInterval = function () {\n            var issunday = (new Date().getDay() === 0) ? true : false;\n            var result = {};\n            // get the first day of this week.\n            var sdate = new Date();\n            if (issunday) {\n                sdate.setDate(sdate.getDate() - 6);\n                sdate.setHours(0, 0, 0, 0);\n            } else {\n                sdate.setDate(sdate.getDate() - sdate.getDay() + 1);\n                sdate.setHours(0, 0, 0, 0);\n            }\n            //console.log(sdate.getFullYear(),sdate.getMonth()+1,sdate.getDate(),sdate.getHours(),sdate.getMinutes(),sdate.getSeconds(),sdate.getMilliseconds());\n            result.startTime = sdate.getTime();\n            // get the last day of this week.\n            var cdate = new Date();\n            if (issunday) {\n                cdate.setHours(24, 0, 0, 0);\n            } else {\n                cdate.setDate(sdate.getDate() + (7 - sdate.getDay()));\n                cdate.setHours(24, 0, 0, 0);\n            }\n            //console.log(cdate.getFullYear(),cdate.getMonth()+1,cdate.getDate(),cdate.getHours(),cdate.getMinutes(),cdate.getSeconds(),cdate.getMilliseconds());\n            result.endTime = cdate.getTime();\n            return result;\n        };\n    }\n\n    /**\n     * 尺寸数据格式化工具\n     * @constructor\n     */\n    function MeasureFormatProvider() {\n\n        /**\n         * Get a instance by this method.\n         * @returns {*}\n         */\n        this.$get = function () {\n            return this;\n        };\n        /**\n         * Formatted as percentage.\n         * @param num ,待格式化的数字\n         * @returns {number}\n         */\n        this.toUtilization = function (num) {\n            if (!num) return 0;\n            return (num / 100).toFixed(1);\n        };\n        /**\n         * 单位计算，支持定义消暑保留长度，定义起始和目标单位，按1024自动进位\n         * @param size ,大小计数\n         * @param unit ,计数单位， 默认为字节B\n         * @param decimals ,小数点后保留的位数，默认保留一位\n         * @param targetUnit, 转换的目标单位， 默认自动进位\n         * @param units , 单位集合\n         */\n        this.sizeConversion = function (size, unit, decimals, targetUnit, units) {\n            if (!size) return 0;\n            // Set default value.\n            unit = (unit) ? unit : units[0];\n            decimals = (decimals) ? decimals : 1;\n            targetUnit = (targetUnit) ? targetUnit : 'auto';\n            var theUnit = units.indexOf(unit);\n            // Whether auto carry.\n            if (targetUnit != 'auto')\n                targetUnit = units.indexOf(targetUnit);\n            // To conversion\n            while (size >= 1024) {\n                size /= 1024;\n                theUnit++;\n                if (theUnit == targetUnit)\n                    break;\n            }\n            return size.toFixed(decimals) + units[theUnit];\n        };\n        /**\n         * 容量计算\n         * @param size\n         * @param unit\n         * @param decimals\n         * @param targetUnit\n         * @returns {string}\n         */\n        this.toByteConv = function (size, unit, decimals, targetUnit) {\n            var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB'];\n            return this.sizeConversion(size, unit, decimals, targetUnit, units);\n        };\n        /**\n         * 主频计算\n         * @param size\n         * @param unit\n         * @param decimals\n         * @param targetUnit\n         * @returns {string}\n         */\n        this.toFrequencyConv = function (size, unit, decimals, targetUnit) {\n            var units = ['Hz', 'KHz', 'MHz', 'GHz', 'THz', 'PHz', 'EHz'];\n            return this.sizeConversion(size, unit, decimals, targetUnit, units);\n        };\n\n    }\n\n    /**\n     * MAP对象，实现MAP功能\n     *\n     * 接口：\n     * size()     获取MAP元素个数\n     * isEmpty()    判断MAP是否为空\n     * clear()     删除MAP所有元素\n     * put(key, value)   向MAP中增加元素（key, value)\n     * remove(key)    删除指定KEY的元素，成功返回True，失败返回False\n     * get(key)    获取指定KEY的元素值VALUE，失败返回NULL\n     * each(callback)  遍历Map,执行处理函数\n     * entrys()        获取键值数组\n     * element(index)   获取指定索引的元素（使用element.key，element.value获取KEY和VALUE），失败返回NULL\n     * hasOwnKey(key)  判断MAP中是否含有指定KEY的元素\n     * hasOwnValue(value) 判断MAP中是否含有指定VALUE的元素\n     * values()    获取MAP中所有VALUE的数组（ARRAY）\n     * keys()     获取MAP中所有KEY的数组（ARRAY）\n     * toString()\n     *\n     * 例子：\n     * var map = new Map();\n     *\n     * map.put(\"key\", \"value\");\n     * var val = map.get(\"key\")\n     * ……\n     *\n     */\n    function mapService(){\n\n        function mapFactory(object){\n\n            /** 存放键的数组(遍历用到) */\n            this.keys = [];\n            /** 存放数据 */\n            this.values = {};\n\n            // format object to map.\n\n            /**\n             * 放入一个键值对\n             * @param {String} key\n             * @param {Object} value\n             */\n            this.put = function(key, value) {\n\n                if(!this.hasOwnKey(key)){\n                    this.keys.push(key);\n                }\n                this.values[key] = value;\n            };\n\n            /**\n             * 获取某键对应的值\n             * @param {String} key\n             * @return {Object} value\n             */\n            this.get = function(key) {\n                return this.values[key];\n            };\n\n            /**\n             * 删除一个键值对\n             * @param {String} key\n             */\n            this.remove = function(key) {\n                var index = this.keys.indexOf(key);\n                if(index > -1)\n                    this.keys.splice(index, 1);\n                delete this.values[key];\n            };\n\n            /**\n             * 遍历Map,执行处理函数\n             *\n             * @param {Function} 回调函数 function(key,value,index){..}\n             */\n            this.each = function(callback){\n                if(typeof callback != 'function'){\n                    return;\n                }\n                var len = this.keys.length;\n                for(var i=0;i<len;i++){\n                    var k = this.keys[i];\n                    callback(k,this.values[k],i);\n                }\n            };\n\n            /**\n             * 获取键值数组(类似Java的entrySet())\n             * @return 键值对象{key,value}的数组\n             */\n            this.entrys = function() {\n                var len = this.keys.length;\n                var entrys = new Array(len);\n                for (var i = 0; i < len; i++) {\n                    var k = this.keys[i];\n                    entrys[i] = {\n                        key : k,\n                        value : this.values[k]\n                    };\n                }\n                return entrys;\n            };\n\n            /**\n             * 根据索引号查找对应的键值对对象\n             * @param index\n             * @returns {*}\n             */\n            this.element = function(index){\n                var len =this.keys.length;\n                if(index >= len)\n                    return null;\n                return {\n                    key : this.keys[index],\n                    value : this.values[this.keys[index]]\n                };\n            };\n\n            /**\n             * 如果数组为数字型数组，则进行从小到大的排序\n             * @returns {Array}\n             */\n            this.sortASC = function(){\n                this.keys.sort(function(a,b){return a>b?1:-1;});\n                return this.entrys();\n            };\n\n            this.sortDESC = function(){\n                return this.keys.sort(function(a,b){return a<b?1:-1;});\n            };\n\n            /**\n             * 判断是否存在\n             * @param key\n             * @returns {*|boolean}\n             */\n            this.hasOwnKey = function(key){\n                return this.values.hasOwnProperty(key);\n            };\n\n            /**\n             * 清空Map\n             */\n            this.clear = function(){\n                this.keys = [];\n                this.values = {};\n            };\n\n\n            /**\n             * 判断Map是否为空\n             */\n            this.isEmpty = function() {\n                return this.keys.length === 0;\n            };\n\n            /**\n             * 获取键值对数量\n             */\n            this.size = function(){\n                return this.keys.length;\n            };\n\n            /**\n             * 重写toString\n             */\n            /*this.toString = function(){\n             var s = \"{\";\n             for(var i=0;i<this.keys.length;i++,s+=','){\n             var k = this.keys[i];\n             s += k+\"=\"+this.values[k];\n             }\n             s+=\"}\";\n             return s;\n             };*/\n\n\n            return this;\n\n        }\n\n        return mapFactory;\n\n    }\n\n})(window, window.angular);\n\n\n/*\nvar utilsInjector = angular.injector(['phoebe.utils']);\nvar modelFormat = utilsInjector.get('ModelFormat');\nutilsInjector.invoke(['PhoebeContext', function(PhoebeContext){\n    console.log(PhoebeContext);\n}]);*/\n\n","/**\n * Created by felix on 11/6/14.\n */\n","/**\n * Created by felix on 10/23/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n(function(window, angular, undefined) {\n    'use strict';\n    /**\n     * Define some of the event type of the controller.\n     * @type {{DICT_LOADED: string, OPTION_LOADED: string}}\n     */\n    var Event = {\n        DICT_LOADED: 'dictLoadingCompleted',\n        OPTION_LOADED: 'optionLoadingCompleted',\n        MODEL_LOADED: 'modelLoadingCompleted',\n        MODEL_OPERATION: 'modelOperation'\n    };\n    var optype = {\n        ADDING: 'adding',\n        MODIFYING: 'modifying',\n        SAVING: 'saving',\n        SAVED: 'saved',\n        REMOVING: 'removing',\n        DELETED: 'deleted',\n        BATCH_REMOVING: 'batchRemoving',\n        BATCH_DELETED: 'batchDeleted',\n        RESET: 'reset'\n    };\n    /**\n     * Lots of the dictionaries are loading.\n     * When all of some dictionary are loading completed, to broadcast event.\n     * @param dicts\n     * @param PhoebeDict\n     * @param dataProvider\n     * @param broadcastEvent\n     */\n    function loadingDictionary(dicts, PhoebeDict, dataProvider, broadcastEvent) {\n            // Whether or not to continue.\n            if (angular.isArray(dicts)) {\n                // Start preloading to the dictionary.\n                PhoebeDict.preload(dicts).success(function(data) {\n                    // Cache dictionary items in $scope.\n                    angular.forEach(data, function(item) {\n                        var paramName = item[PhoebeDict.getForeignKey()];\n                        dataProvider[paramName] = item;\n                    });\n                    // To broadcast the loading completed event.\n                    broadcastEvent(Event.DICT_LOADED, true);\n                }).error(function(data) {\n                    dataProvider.error = data;\n                    // To broadcast the loading completed event.\n                    broadcastEvent(Event.DICT_LOADED, false);\n                });\n            } else {}\n        }\n        /**\n         * Lots of the options are loading.\n         * When all of some options are loading completed, to broadcast event.\n         * @param options\n         * @param PhoebeResource\n         * @param q\n         * @param dataProvider\n         * @param resoure\n         * @param broadcastEvent\n         */\n    var reg = new RegExp(\"[^/]+\");\n\n    function loadingOptionData(options, PhoebeResource, q, dataProvider, resoure, broadcastEvent) {\n            // Whether or not to continue.\n            if (angular.isArray(options)) {\n                // Save lots of options data\n                var vals = [];\n                angular.forEach(options, function(opt) {\n                    // The option handler.\n                    if (opt.hasOwnProperty('model')) {\n                        // To obtain the model name as a quote name.\n                        var modelName = opt.model.match(reg)[0];\n                        // Cache resoure service of the model.\n                        resoure[modelName] = new PhoebeResource(opt.model, (opt.hasOwnProperty('PK')) ? opt.PK : undefined);\n                        // 分支判断，如果拥有trigger属性\n                        if (opt.hasOwnProperty('trigger')) {\n                            // 创建可触发的options对象\n                            if (opt.hasOwnProperty('name')) dataProvider[opt.name] = [];\n                            // 在resoure中，增加可调用的触发器，以实现级联操作\n                            resoure[opt.name + 'Trigger'] = function(id) {\n                                if (opt.hasOwnProperty('wherestr')) {\n                                    if (!opt.wherestr.hasOwnProperty('where')) {\n                                        opt.wherestr.where = {};\n                                    }\n                                    opt.wherestr.where[opt.trigger] = id;\n                                } else {\n                                    var wherestr = {};\n                                    wherestr.where = {};\n                                    wherestr.where[opt.trigger] = id;\n                                    opt.wherestr = wherestr;\n                                }\n                                // 发起请求\n                                var promise = resoure[modelName].query(opt.wherestr);\n                                promise.success(function(datalist) {\n                                    dataProvider[opt.name] = datalist;\n                                    dataProvider[opt.name].PK = resoure[modelName].pkfield;\n                                });\n                                return promise;\n                            };\n                        } else {\n                            // 创建普通的options对象\n                            // To joint where string.\n                            var wherestr = {};\n                            if (opt.hasOwnProperty('wherestr')) {\n                                wherestr = opt.wherestr;\n                            }\n                            // To send request.\n                            var promise = resoure[modelName].query(wherestr);\n                            promise.success(function(datalist) {\n                                if (opt.hasOwnProperty('name')) {\n                                    dataProvider[opt.name] = datalist;\n                                    dataProvider[opt.name].PK = resoure[modelName].pkfield;\n                                }\n                            });\n                            // Save object of the promise.\n                            vals.push(promise);\n                        }\n                    }\n                });\n                // All of the request of handler.\n                var promise = q.all(vals);\n                promise.then(function(datalist) {\n                    broadcastEvent(Event.OPTION_LOADED, true);\n                }, function(msg) {\n                    broadcastEvent(Event.OPTION_LOADED, false);\n                });\n            } else {}\n        }\n        /**\n         * 自动创建实体模型对象的可调用方法\n         * @param resoure\n         * @param modelName\n         * @param dataSourceName\n         * @param selectedItems\n         * @param model\n         * @param dataProvider\n         * @param broadcast\n         */\n    function createCrudMethod(resoure, modelName, dataSourceName, selectedItems, model, dataProvider, broadcast, primaryKeyField) {\n            // 定义各实体模型对象，在执行操作后的响应返回对象\n            var response = {\n                success: false, // 操作是否成功\n                model: modelName, // 执行该操作的实体模型对象\n                optype: null, // 已执行的操作的操作类型\n                trigger: null, // 由哪个操作出发\n                data: null // 无论操作成功还是失败，返回的结果数据\n            };\n            // 定义需要创建的CRUD方法\n            var methodNames = {\n                Add: addHandler, // 添加记录触发器\n                Modify: modifyHandler, // 修改记录触发器\n                Saving: savingHandler, // 执行保存记录操作\n                Save: saveHandler, // 执行保存记录操作\n                Reset: resetHandler, // 复位被编辑的记录对象\n                Remove: removeHandler, // 移除记录触发器\n                Delete: deleteHandler, // 执行删除记录操作\n                MarkSelected: markSelectedHandler, // 对记录打选中标记\n                BatchRemove: batchRemoveHandler, // 批量移除记录触发器\n                BatchDelete: batchDeleteHandler, // 批量删除记录操作\n                QueryData: queryDataHandler\n            };\n            // 在resoure里，为modelname实体对象模型注册可调用的方法\n            angular.forEach(methodNames, function(val, key) {\n                var callName = modelName + key;\n                resoure[callName] = val;\n            });\n            // 为所有实体模型对象注册通用的下拉选单选中操作\n            resoure.setSelected = selectedHandler;\n            /**\n             * Define a handler of select the operating.\n             * @param fkval - 选中对象的外键id值\n             * @param optionName  -  该选项从属于那个options，该options在preload阶段被初始化\n             * @param includeName  - 该选项对应的关联实体对象\n             */\n            function selectedHandler(fkval, optionName, includeName) {\n                    // 三个参数必须全部被引入\n                    if (!angular.isDefined(fkval) || !angular.isDefined(optionName) || !angular.isDefined(includeName)) return;\n                    // 如果在数据源列表中，找到了所属的options，则继续执行\n                    if (dataProvider.hasOwnProperty(optionName)) {\n                        // 从数据源列表中，找到被选中的数据，并缓存至数据源对应的数据源项的属性上，并建立于wherestr之间的关系，关系缓存在linkname中\n                        for (var i = 0; i < dataProvider[optionName].length; i++) {\n                            var pkfield = (dataProvider[optionName].PK) ? dataProvider[optionName].PK : 'id';\n                            if (fkval == dataProvider[optionName][i][pkfield]) {\n                                dataProvider[optionName].selectedItem = dataProvider[optionName][i];\n                                dataProvider[optionName].linkname = includeName;\n                                break;\n                            }\n                        }\n                    }\n                }\n                /**\n                 * Define a trigger of add the operating.\n                 * 负责派发该ADDING事件\n                 * 注意：如果该事件被标识为已处理，则直接触发保存操作\n                 */\n            function addHandler() {\n                    resetHandler();\n                    response.trigger = optype.ADDING;\n                    response.optype = optype.ADDING;\n                    broadcast(Event.MODEL_OPERATION, response);\n                    /*var beforeEvent  = broadcast(Event.MODEL_OPERATION, response);\n                    if(beforeEvent.defaultPrevented) {\n                        saveHandler();\n                    }*/\n                }\n                /**\n                 * Define a trigger of modify the operating.\n                 * 负责派发该MODIFYING事件\n                 * 注意：如果该事件被标识为已处理，则直接触发保存操作\n                 */\n            var itemIndex; // 当前操作的选中\n            function modifyHandler(index) {\n                    itemIndex = index;\n                    model[modelName] = angular.copy(model[dataSourceName][index]);\n                    //\n                    response.trigger = optype.MODIFYING;\n                    response.optype = optype.MODIFYING;\n                    response.index = index;\n                    broadcast(Event.MODEL_OPERATION, response);\n                    /*var beforeEvent  = broadcast(Event.MODEL_OPERATION, response);\n                    if(beforeEvent.defaultPrevented) {\n                        saveHandler();\n                    }*/\n                }\n                /**\n                 * The save mothed of the entity object.\n                 * 默认提交model[modelName]对象进行保存\n                 * 保存成功后，根据include的关系，找到对应的关联对象\n                 * 对保存成功返回的数据，进行追加关联对象操作，最后派发保存成功事件\n                 */\n            function savingHandler() {\n                response.optype = optype.SAVING;\n                var beforeEvent = broadcast(Event.MODEL_OPERATION, response);\n                if (beforeEvent.defaultPrevented) {\n                    saveHandler();\n                }\n            }\n\n            function saveHandler() {\n                    // 保存数据\n                    resoure[modelName].save([model[modelName]]).success(function(datalist) {\n                        // 根据该实体模型的resoure对象中的wherestr中的include属性值，找到需要关联的目标对象，将其注册到保存成功对象中\n                        if (resoure[modelName].hasOwnProperty('include')) {\n                            angular.forEach(resoure[modelName].include, function(includeName) {\n                                // 如果下拉选单未修改，则使用提交时的数据\n                                datalist[0][includeName] = model[modelName][includeName];\n                                // 如果下拉选单被修改，则查找选中的数据\n                                for (var item in dataProvider) {\n                                    if (dataProvider[item].hasOwnProperty('linkname')) {\n                                        if (includeName == dataProvider[item].linkname) {\n                                            // 如果值被改变，则赋值，否则原样输出\n                                            if (dataProvider[item].selectedItem) {\n                                                datalist[0][includeName] = dataProvider[item].selectedItem;\n                                                // 复位\n                                                dataProvider[item].selectedItem = null;\n                                            }\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                        var isModify = (response.trigger == optype.MODIFYING);\n                        // 判断新增或是修改\n                        if (isModify)\n                        // 更新数据源列表\n                            model[dataSourceName][itemIndex] = datalist[0];\n                        else\n                        // 更新数据源列表\n                            model[dataSourceName].unshift(datalist[0]);\n                        // 返回值赋值操作\n                        response.success = true;\n                        response.data = datalist[0];\n                        // 复位表单\n                        resetHandler();\n                        response.optype = optype.SAVED;\n                        broadcast(Event.MODEL_OPERATION, response);\n                    }).error(function(msg) {\n                        response.optype = optype.SAVED;\n                        broadcast(Event.MODEL_OPERATION, response);\n                    });\n                }\n                /**\n                 * Define a trigger of remove the operating.\n                 * 负责派发REMOVING事件\n                 * 注意：如果该事件被标识为已处理，则直接触发删除操作\n                 */\n            function removeHandler(index) {\n                    response.optype = optype.REMOVING;\n                    response.index = index;\n                    var beforeEvent = broadcast(Event.MODEL_OPERATION, response);\n                    if (beforeEvent.defaultPrevented) {\n                        deleteHandler(index);\n                    }\n                }\n                // 删除操作处理器\n            function deleteHandler(index) {\n                    // 执行操作\n                    resoure[modelName].delete([model[dataSourceName][index][primaryKeyField]]).success(function(datalist) {\n                        response.success = true;\n                        response.data = model[dataSourceName][index];\n                        model[dataSourceName].splice(index, 1);\n                    }).error(function(msg) {\n                        response.success = false;\n                        response.data = msg;\n                    }).then(function() {\n                        // 广播该模型的save操作\n                        response.optype = optype.DELETED;\n                        broadcast(Event.MODEL_OPERATION, response);\n                    });\n                }\n                /**\n                 * Define a trigger of batch remove the operating.\n                 * 负责派发BATCH_REMOVING事件\n                 * 注意：如果该事件被标识为已处理，则直接触发批量删除操作\n                 */\n                // 标记已选中的实体对象，并存放到对应实体对象模型中的selectedItems属性中\n            function markSelectedHandler(selectedItem) {\n                    var exists = model[selectedItems].indexOf(selectedItem);\n                    if (exists < 0) {\n                        model[selectedItems].push(selectedItem);\n                    } else {\n                        model[selectedItems].splice(exists, 1);\n                    }\n                }\n                // 批量删除触发器\n            function batchRemoveHandler() {\n                    response.optype = optype.BATCH_REMOVING;\n                    var beforeEvent = broadcast(Event.MODEL_OPERATION, response);\n                    if (beforeEvent.defaultPrevented) {\n                        batchDeleteHandler();\n                    }\n                }\n                // 批量删除操作\n            function batchDeleteHandler() {\n                    // 是否继续\n                    if (model[selectedItems].length === 0) return;\n                    // 标记操作类型\n                    response.optype = optype.DELETED;\n                    // 整理待删除的数据list\n                    var idx = [];\n                    angular.forEach(model[selectedItems], function(selectedItem) {\n                        if (selectedItem.hasOwnProperty(primaryKeyField)) idx.push(selectedItem[primaryKeyField]);\n                    });\n                    // 执行操作\n                    resoure[modelName].delete(idx).success(function(datalist) {\n                        // 更新列表\n                        angular.forEach(model[selectedItems], function(item) {\n                            var index = model[dataSourceName].indexOf(item);\n                            model[dataSourceName].splice(index, 1);\n                        });\n                        // 复位选中列表\n                        model[selectedItems] = [];\n                        // 返回值赋值操作\n                        response.success = true;\n                        response.data = datalist;\n                    }).error(function(msg) {\n                        // 返回值赋值操作\n                        response.success = false;\n                        response.data = msg;\n                    }).then(function() {\n                        model[selectedItems] = [];\n                        // 广播该模型的save操作\n                        broadcast(Event.MODEL_OPERATION, response);\n                    });\n                }\n\n                /**\n                 * 2015-02-27 by wizaliu\n                 * 在模型上添加query方法，传入一个json对象，配置分页的条件（page、rows），并且可以重新配置wherestr条件\n                 */\n            function queryDataHandler(c) {\n                    var paginObj = c.pagination || undefined,\n                        queryObj = c.wherestr || resoure[modelName].wherestr || {};\n                    try{\n                        //try to delete count property,if it has\n                        delete(queryObj.count);  \n                    }catch(e){}\n                    \n                    if (paginObj){\n                        var page = paginObj.page;\n                        var rows = paginObj.rows;\n                        var limit = rows;\n                        var skip = (page-1)*rows;\n                        \n                        queryObj.limit = limit;\n                        queryObj.skip = skip;\n                    } else {\n                        delete(queryObj.limit);\n                        delete(queryObj.skip);\n                    }\n\n                    resoure[modelName].query(queryObj).success(function(data) {\n                        model[dataSourceName] = data;\n                        response.success = true;\n                        broadcast(Event.MODEL_LOADED, response);\n                    }).error(function(msg) {\n                        broadcast(Event.MODEL_LOADED, response);\n                    });\n\n                    //if pagination is defined,then query count\n                    if (paginObj){\n                        queryObj.count = true;\n\n                        resoure[modelName].query(queryObj).success(function(data) {\n                            resoure[modelName+'Count'] = data.count;\n                            broadcast(Event.MODEL_LOADED, response);\n                        }).error(function(msg) {\n                            broadcast(Event.MODEL_LOADED, response);\n                        });\n                    }\n                }\n\n                /**\n                 * 对已编辑的实体对象或已放弃编辑的实体对象进行复位操作\n                 */\n            function resetHandler() {\n                model[modelName] = null;\n                response.optype = optype.RESET;\n                broadcast(Event.MODEL_OPERATION, response);\n            }\n        }\n        /**\n         * Sign up for a sub module of the phoebe on the angular.\n         * - Provide common controller.\n         */\n    angular.module('phoebe.controller', []).service('PhoebeController', phoebeControllerService);\n    /**\n     * Registered the HTTP request service on the phoebe.\n     * @type {string[]}\n     */\n    phoebeControllerService.$inject = ['PhoebeDict', 'PhoebeResource', '$q'];\n\n    function phoebeControllerService(PhoebeDict, PhoebeResource, $q) {\n        /**\n         * Broadcast an event on the $scope.\n         * @param type : The Event type provided by the 'Event' variables.\n         * @param data : Portability data by event.\n         */\n        function broadcastEvent(type, data) {\n                if (angular.isDefined(scope)) return scope.$broadcast(type, data);\n            }\n            /**\n             * Define a method of the preloading.\n             * The parameter of the 'key', now allow the two values, They are 'dict' and 'options'.\n             * - The 'dict' parameter means to preload many dictionaries data.\n             * - The 'options' parameter means to preload many options data.\n             * The parameter of the 'config', This is a configuration information.\n             * - Different 'key' has different configuration format.\n             * @param key\n             * @param config\n             */\n        function preload(key, config) {\n                // 如果未同时传入键名和配置参数，将终止执行本次预加载过程\n                if (!angular.isDefined(key) || !angular.isDefined(config)) return;\n                // 分支判断，目前仅仅支持数据字典与下拉选单的预加载过程\n                switch (key) {\n                    case 'dict':\n                        loadingDictionary(config, PhoebeDict, dataProvider, broadcastEvent);\n                        break;\n                    case 'options':\n                        loadingOptionData(config, PhoebeResource, $q, dataProvider, resoure, broadcastEvent);\n                        break;\n                }\n            }\n            /**\n             * Define a method to create the model object.\n             * @param modelName\n             * @param config\n             */\n        function createModel(modelName, config) {\n                // 如果两个参数都不存在，则不执行创建过程\n                if (!angular.isDefined(modelName) || !angular.isDefined(config)) return;\n                // 如果配置参数中，没有model属性，则不执行创建过程\n                if (config.hasOwnProperty('model')) {\n                    var primaryKeyField = (config.hasOwnProperty('PK')) ? config.PK : 'id';\n                    // 为将要创建的实体模型对象，定义引用名\n                    var dataSourceName = modelName + 'DataSource'; // 为缓存的实体模型对象的列表数据，定义引用名\n                    var selectedItems = modelName + 'SelectedItems'; // 为缓存被选中的实体模型对象数据，定义引用名\n                    // 为将要创建的实体模型对象及其数据，创建缓存容器\n                    model[modelName] = {}; // 初始化可编辑的实体对象\n                    model[dataSourceName] = []; // 初始化第一次查询的实体对象列表，作为该实体模型对象的数据源\n                    model[selectedItems] = []; // 初始化被选中的实体对象列表\n                    // 为modelName，创建可调用服务端资源服务对象\n                    var modelResource = new PhoebeResource(config.model, primaryKeyField);\n                    // 是否有创建实体模型自定义接口的需要?\n                    if (config.hasOwnProperty('interface')) {\n                        // 判断是配置了一个还是多个自定义接口\n                        var isMultiple = angular.isArray(config.interface);\n                        // 在实体对象模型资源对象中注册自定义接口\n                        if (isMultiple) {\n                            angular.forEach(config.interface, function(face) {\n                                modelResource.setInterface(face);\n                            });\n                        } else {\n                            modelResource.setInterface(config.interface);\n                        }\n                    }\n                    // 为创建号的实体对象的资源对象的第一次请求，拼接请求条件\n                    var wherestr = (config.hasOwnProperty('wherestr')) ? config.wherestr : undefined;\n                    // 定义请求返回的响应数据\n                    var response = {\n                        model: modelName,\n                        success: false\n                    };\n\n                    //if pagination is defined, then add pagination condition\n\n                    if (config.hasOwnProperty('pagination')){\n                        var page = config.pagination.page;\n                        var rows = config.pagination.rows;\n                        var limit = rows;\n                        var skip = (page-1)*rows;\n                        if (limit && skip !== undefined){\n                            wherestr.limit = limit;\n                            wherestr.skip = skip;\n                        }\n                    }\n\n                    // 执行查询\n                    modelResource.query(wherestr).success(function(datalist) {\n                        // 赋值操作\n                        model[dataSourceName] = datalist;\n                        // 缓存该模型的资源服务对象\n                        resoure[modelName] = modelResource;\n                        // 自动创建view层可调用的操作方法\n                        createCrudMethod(resoure, modelName, dataSourceName, selectedItems, model, dataProvider, broadcastEvent, primaryKeyField);\n                        // 返回结果赋值\n                        response.success = true;\n                        // 派发模型创建结束事件\n                        broadcastEvent(Event.MODEL_LOADED, response);\n                    }).error(function(msg) {\n                        broadcastEvent(Event.MODEL_LOADED, response);\n                    });\n\n                    //if pagination is defined, then query count\n                    if (config.hasOwnProperty('pagination')){\n                        wherestr.count = true;\n                        modelResource.query(wherestr).success(function(result) {\n                            resoure[modelName+'Count'] = result.count;\n                            response.success = true;\n                            // 派发模型创建结束事件\n                            broadcastEvent(Event.MODEL_LOADED, response);\n                        }).error(function(msg) {\n                            broadcastEvent(Event.MODEL_LOADED, response);\n                        });\n                    }\n\n                }\n            }\n            /**\n             * Define some open interface.\n             * @param a\n             * @returns {*}\n             */\n        var scope,\n            dataProvider,\n            model,\n            resoure;\n        // The constructor.\n        function openInterface(scopeSource) {\n                // 确认是否是scope对象\n                if (angular.isObject(scopeSource) && scopeSource.hasOwnProperty('$id')) {\n                    // 在scope对象中，创建三个容器，以用于缓存controller中所需的数据源与可调用方法\n                    scope = scopeSource;\n                    dataProvider = scope.$dataProvider = {}; // 数据源对象，用于存放缓存的字典项与下拉选单数据\n                    model = scope.$model = {}; // 缓存得到的服务端资源对象，该类对象统称为实体模型对象\n                    resoure = scope.$resoure = {}; // 实体模型对象提供的可调用服务端接口\n                }\n            }\n            // 将Controller中所派发的事件类型，以静态常量的方式开放\n        angular.forEach(Event, function(value, key) {\n            openInterface.prototype[key] = value;\n        });\n        // 将Controller中,创建的实体模型对象，所使用的操作类型以静态产量的方式开放\n        openInterface.prototype.optype = optype;\n        // 开放预加载接口.\n        openInterface.prototype.preload = function(key, config) {\n            preload(key, config);\n            return this;\n        };\n        // 开放创建实体模型接口\n        openInterface.prototype.createModel = function(model, config) {\n            createModel(model, config);\n            return this;\n        };\n        // return.\n        return openInterface;\n    }\n})(window, window.angular, undefined);","/**\n * Created by felix on 10/30/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n\n(function(window, angular, undefined){\n\n    /**\n     * Define ome of the variables.\n     * dictCache : The cache pool.\n     * dictResource : Define the dict service.\n     * includeName : When the query, the use of the relationship.\n     * dictForeignKey: The use of foreign keys.\n     * keyField: The use of key's field.\n     * valueField: The use of value's field.\n     * @type {{}}\n     */\n\n    var dictCache = {},\n        dictResource,\n        includeName,\n        dictForeignKey = 'dict',\n        keyField = 'key',\n        valueField = 'value';\n\n    /**\n     * Began to load the data dictionary.\n     * @param dictlist\n     * @returns {*}\n     */\n    function loadDataDictionary(dictlist){\n        var existingList = [];\n        // Whether or not to continue\n        if(!angular.isArray(dictlist))\n            return {err: \"To load the data dictionary are failure!\"};\n        // Tectonic conditions.\n        var wherestr = {\n            or: [],\n            include: [includeName]\n        };\n        angular.forEach(dictlist, function(item){\n            // existing\n            if(hasOwnDictionary(item)){\n                existingList.push(dictCache[item]);\n            }else{\n                // save query.\n                var temp = {};\n                temp[dictForeignKey] = item;\n                wherestr.or.push(temp);\n            }\n        });\n        // Whether or not to continue\n        if(!dictResource)\n            return errorHandler(\"The resource of the dictionary is \\\"undefined\\\".\");\n        // do query.\n        var promise;\n\n        if(wherestr.or.length > 0){\n            promise = dictResource.query(wherestr);\n            promise.success(function(list){\n                angular.forEach(list, function(item){\n                    dictCache[item[dictForeignKey]] = item;\n                });\n            });\n        }else{\n            promise = {\n                success: function(fun){\n                    fun(existingList);\n                    return promise;\n                },\n                error: function(fun){\n                    fun(existingList);\n                    return promise;\n                }\n            };\n        }\n\n        return promise;\n    }\n\n    /**\n     * Get a dictionary entry value.\n     * @param dict\n     * @param value\n     * @param showfield\n     * @returns {*}\n     */\n    function getDictionaryValue(dict, value, showfield){\n        var result;\n        // To display the field.\n        if(!angular.isDefined(showfield)) showfield = valueField;\n        // The options list.\n        if(hasOwnDictionary(dict)){\n            var opts = dictCache[dict][includeName];\n            // found value.\n            for (var i = 0; i < opts.length; i++) {\n                if (opts[i][keyField] == value) {\n                    result = opts[i][showfield];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * The value of the dictionary entry exists.\n     * @param dictName\n     * @returns {*}\n     */\n    function hasOwnDictionary(dictName){\n        if(!dictName || dictName === '')\n            return errorHandler(\"The name of the dictionary is \\\"undefined\\\".\");\n        else\n            return dictCache.hasOwnProperty(dictName);\n    }\n\n    /**\n     * The error handler.\n     * @param msg\n     * @returns {{error: *}}\n     */\n    function errorHandler(msg){\n        return {error: msg};\n    }\n\n    /**\n     * Sign up for a sub module of the phoebe on the angular.\n     * - Provide common dict.\n     */\n\n    angular.module('phoebe.dict', []).\n        factory('PhoebeDict', PhoebeDictFactory).\n        filter('dictFormat' , dictFormatFilter);\n\n    /**\n     * Registered the dict option operation's service on the phoebe.\n     * @type {string[]}\n     */\n    PhoebeDictFactory.$inject = ['$phoebe', 'PhoebeResource'];\n    function PhoebeDictFactory ($phoebe, PhoebeResource) {\n        // Whether or not to continue\n        if(!$phoebe.hasOwnProperty('dict'))\n            return errorHandler(\"Phoebe load failure!\");\n        // When phoebe start, Get the configuration information.\n        var dictConfig     = $phoebe.dict;\n        dictResource       = new PhoebeResource('/' + dictConfig.mainModel);\n        includeName        = dictConfig.include;\n\n        if(dictConfig.hasOwnProperty('foreignKey'))\n            dictForeignKey = (dictConfig.foreignKey) ? dictConfig.foreignKey : dictForeignKey;\n\n        if(dictConfig.hasOwnProperty('key'))\n            keyField = (dictConfig.key) ? dictConfig.key : keyField;\n\n        if(dictConfig.hasOwnProperty('value'))\n            valueField = (dictConfig.value) ? dictConfig.value : valueField;\n\n        /**\n         * The dictionary preloading method.\n         * - The new load will be cached.\n         * - If there are loaded, don't send the new request.\n         * @param dictlist\n         * @returns {*}\n         */\n        this.preload = function (dictlist){\n            if(angular.isString(dictlist))\n                dictlist = [dictlist];\n            return loadDataDictionary(dictlist);\n        };\n\n        /**\n         * Get the specified dictionary.\n         * @param dict\n         * @returns {*}\n         */\n        this.getDict = function (dict){\n            if(hasOwnDictionary(dict))\n                return dictCache[dict];\n            else\n                return this.preload(dict);\n        };\n\n        /**\n         * Get a dictionary value.\n         * - Support to get the value of the specified field.\n         * - Default to get the 'value' field's value.\n         * @param dict\n         * @param value\n         * @param showfield\n         * @returns {string}\n         */\n        this.getDictValue = function (dict, value, showfield){\n            var result;\n            // existing\n            if(hasOwnDictionary(dict))\n                result = getDictionaryValue(dict, value, showfield);\n            else\n                result = errorHandler('Not found the value of \\\"' + value + '\\\" on the \\\"' + dict + '\\\"!');\n            //\n            return result;\n        };\n        /**\n         *\n         */\n        this.getForeignKey = function(){\n          return dictForeignKey;\n        };\n        // return.\n        return this;\n    }\n\n    /**\n     * The dictionary item filter.\n     * @type {string[]}\n     */\n    dictFormatFilter.$inject = [];\n    function dictFormatFilter () {\n        return function (val, dict, showfield) {\n            if(!val || !dict)\n                return val;\n            var result = getDictionaryValue(dict, val, showfield);\n            return (result) ? result : val;\n        };\n    }\n\n})(window, window.angular);","/**\n * Created by felix on 10/20/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n(function(window, angular, undefined) {\n    'use strict';\n    /**\n     * General format request method.\n     * - According to the feature of the loopback, processing to send the request.\n     * @param wherestr\n     * @returns {string}\n     */\n    function formatWhereString(wherestr) {\n            var str = '';\n\n            // contact foreignKey id.\n            if (wherestr.hasOwnProperty('fkid') && angular.isString(wherestr.fkid)) {\n                str += '/' + wherestr.fkid;\n            }\n            // contact One-to-many associative table.\n            if (wherestr.hasOwnProperty('hasmany') && angular.isString(wherestr.hasmany)) {\n                //str += '/'+ inflectionPluralize(wherestr.hasmany);\n                str += '/' + wherestr.hasmany;\n            }\n            // The where string concatenation.\n            if (angular.isDefined(wherestr.where)) {\n                var logic = 'and';\n                if (angular.isDefined(wherestr.where.logic)) {\n                    if (wherestr.where.logic == 'and') logic = 'and';\n                    if (wherestr.where.logic == 'or') logic = 'or';\n                }\n                var count = 0;\n                angular.forEach(wherestr.where, function(val, key) {\n                    if (key != 'logic') {\n                        str += (str.indexOf('?') === -1) ? '?' : '&';\n                        if (Object.keys(wherestr.where).length === 1) {\n                            //如果是查询总数的wherestr，则每一个where条件要写成\"[where][xxx]=xxx\"的形式\n                            //如果不是查询总数的wherestr，则每个where条件要写成\"filter[where][xxx]=xxx\"的形式\n                            if (wherestr.count){\n                                str += 'where[' + key + ']=' + val;\n                            } else {\n                                str += 'filter[where][' + key + ']=' + val;\n                            }\n                        } else {\n                            if (wherestr.count){\n                                str += 'where[' + logic + '][' + count + '][' + key + ']=' + val;\n                            } else {\n                                str += 'filter[where][' + logic + '][' + count + '][' + key + ']=' + val;\n                            }\n                            \n                        }\n                        count++;\n                    }\n                });\n            }\n            // The where or eg: {or:[{fieldname: fieldval},{fieldname2:fieldval2}]}\n            if (angular.isDefined(wherestr.or) && angular.isArray(wherestr.or)) {\n                angular.forEach(wherestr.or, function(item, index) {\n                    angular.forEach(item, function(val, key) {\n                        str += (str.indexOf('?') === -1) ? '?' : '&';\n                        str += 'filter[where][or][' + index + '][' + key + ']=' + val;\n                    });\n                });\n            }\n            // the where and\n            if (angular.isDefined(wherestr.and) && angular.isArray(wherestr.and)) {\n                angular.forEach(wherestr.and, function(item, index) {\n                    angular.forEach(item, function(val, key) {\n                        str += (str.indexOf('?') === -1) ? '?' : '&';\n                        str += 'filter[where][and][' + index + '][' + key + ']=' + val;\n                    });\n                });\n            }\n            // the where not\n            if (angular.isDefined(wherestr.neq) && angular.isArray(wherestr.neq)) {\n                angular.forEach(wherestr.neq, function(item, index) {\n                    angular.forEach(item, function(val, key) {\n                        str += (str.indexOf('?') === -1) ? '?' : '&';\n                        str += 'filter[where][' + key + '][neq]=' + val;\n                    });\n                });\n            }\n            // The include string concatenation.\n            if (angular.isArray(wherestr.include)) {\n                angular.forEach(wherestr.include, function(item) {\n                    str += (str.indexOf('?') === -1) ? '?' : '&';\n                    str += 'filter[include]=' + item;\n                });\n            }\n            // The between string concatenation.\n            if (angular.isDefined(wherestr.between) && (Object.keys(wherestr.between).length > 1 && angular.isArray(wherestr.between.val))) {\n                str += (str.indexOf('?') === -1) ? '?' : '&';\n                str += 'filter[where][' + wherestr.between.field + '][between][0]=' + wherestr.between.val[0];\n                str += '&filter[where][' + wherestr.between.field + '][between][1]=' + wherestr.between.val[1];\n            }\n            // The order string concatenation.\n            if (angular.isDefined(wherestr.order)) {\n                str += (str.indexOf('?') === -1) ? '?' : '&';\n                if (angular.isDefined(wherestr.order.field)) {\n                    str += 'filter[order]=' + wherestr.order.field;\n                }\n                if (angular.isDefined(wherestr.order.val)) {\n                    str += ' ' + wherestr.order.val;\n                } else {\n                    str += ' DESC';\n                }\n            }\n            // The limit string concatenation.\n            if (angular.isNumber(wherestr.limit)) {\n                str += (str.indexOf('?') === -1) ? '?' : '&';\n                str += 'filter[limit]=' + wherestr.limit;\n            }\n            // The skip string condition\n            if (angular.isNumber(wherestr.skip)) {\n                str += (str.indexOf('?') === -1) ? '?' : '&';\n                str += 'filter[skip]=' + wherestr.skip;\n            }\n            // The like string concatenation.\n            if (angular.isDefined(wherestr.like) && angular.isDefined(wherestr.like.field) && angular.isDefined(wherestr.like.val)) {\n                str += (str.indexOf('?') === -1) ? '?' : '&';\n                str += 'filter[where][' + wherestr.like.field + '][like]=' + wherestr.like.val;\n            }\n            // The lt string concatenation.\n            if (angular.isDefined(wherestr.lt) && angular.isDefined(wherestr.lt.field) && angular.isDefined(wherestr.lt.val)) {\n                str += (str.indexOf('?') === -1) ? '?' : '&';\n                str += 'filter[where][' + wherestr.lt.field + '][lt]=' + wherestr.lt.val;\n            }\n            // The gt string concatenation.\n            if (angular.isDefined(wherestr.gt) && angular.isDefined(wherestr.gt.field) && angular.isDefined(wherestr.gt.val)) {\n                str += (str.indexOf('?') === -1) ? '?' : '&';\n                str += 'filter[where][' + wherestr.gt.field + '][gt]=' + wherestr.gt.val;\n            }\n            // return wherestr.\n            return str;\n        }\n        /**\n         * Converting pluralize for the name of the table.\n         * - Parameters: This modelname is database table name.\n         * @param modelName ： 模型名称，通常为单数\n         */\n    function formatModelName(modelName) {\n            var reg = new RegExp(\"[^/]+\");\n            var apiname = modelName.match(reg)[0];\n            return modelName.replace(apiname, inflectionPluralize(apiname));\n        }\n        // 单词进行单数转换复数\n    function inflectionPluralize(word) {\n            return inflection.pluralize(word);\n        }\n        /**\n         * The general method of sending concurrent request.\n         * - When all the requests are response, returns a promise object.\n         * @param $q\n         * @param vals\n         * @returns {Promise}\n         */\n    function concurrentHanler($q, vals) {\n            // Concurrent requests.\n            var promise = $q.all(vals);\n            // To define a callback for the success.\n            promise.success = function(callback) {\n                promise.then(function(reslist) {\n                    var datalist = [];\n                    angular.forEach(reslist, function(res) {\n                        if (res.data === '') datalist.push(res.status);\n                        else datalist.push(res.data);\n                    });\n                    callback(datalist);\n                });\n                return promise;\n            };\n            // To define a callback for the error.\n            promise.error = function(callback) {\n                promise.then(null, function(reslist) {\n                    var errs = [];\n                    angular.forEach(reslist, function(res) {\n                        errs.push(res.status);\n                    });\n                    callback(errs);\n                });\n                return promise;\n            };\n            return promise;\n        }\n        /**\n         * The general method of sending chain request.\n         * - Returns the request of the promise object.\n         * @param promise\n         * @returns {*}\n         */\n    function chainRequest(promise) {\n            promise.then(function(success) {\n                successHandler(success);\n            }, function(error) {\n                errorHandler(error);\n            });\n            return promise;\n        }\n        /**\n         * The success of the default response handler.\n         * - when after The success of the response to calls.\n         * @param res\n         * @returns {*}\n         */\n    function successHandler(res) {\n            return res;\n        }\n        /**\n         * The failure of the default response handler.\n         * - when after The failure of the response to calls.\n         * @param er\n         * @returns {string}\n         */\n    function errorHandler(er) {\n            var msg;\n            switch (er.status) {\n                case 404:\n                    msg = '请求的远端服务不存在!';\n                    break;\n                case 500:\n                    msg = '请求的远程服务出错！';\n                    break;\n            }\n            console.log('[http request error]: ' + msg);\n        }\n        /**\n         * Sign up for a sub module of the phoebe on the angular.\n         * - Provide common services for sent HTTP request.\n         */\n    angular.module('phoebe.httpService', []).config(configuration).factory('PhoebeHttpService', httpService);\n    /**\n     * Intercept to Send the request.\n     */\n    configuration.$inject = ['$httpProvider'];\n\n    function configuration($httpProvider) {\n            /*$httpProvider.defaults.transformRequest.push(function(data, headersGetter){\n                    console.log(data);\n                    return data;\n                });*/\n        }\n        /**\n         * Registered the HTTP request service on the phoebe.\n         * @type {string[]}\n         */\n    httpService.$inject = ['$http', '$q', '$phoebe'];\n\n    function httpService($http, $q, $phoebe) {\n            if (!$phoebe.hasOwnProperty('serverUrl')) return \"Phoebe load failure!\";\n            /**\n             * 查询方法，支持单表、多表、中间表查询\n             * apistr为必传参数，类型为String. eg：'/family', '/family/count', '/family/customInterface'\n             * wherestr为可选参数, 该参数类型为Object.\n             * eg:\n             * var wherestr = {\n             *  fkid   : '5F94727343fhjdu4',\n             *  hasmany: 'car',\n             *  where  : {logic:'and', zip: 750001}          // where条件，支持并列和或者关系，个定义多个条件\n             *  between: {field: 'zip', val: ['750000', '750010']},\n             *  include: ['cars', 'members'],\n             *  order  : {field: 'clock', val:'ASC'},\n             *  limit  : 1,\n             *  like   : {field:'sex', val:'男'},\n             *  lt     : {field:'age', val:'26'},\n             *  gt     : {field:'age', val:'26'}\n             * }\n             * @param api\n             * @param wherestr\n             * @returns {*}\n             */\n            function find(apistr, wherestr) {\n                    if (!angular.isString(apistr) || apistr === '') return;\n                    // Concat the apiurl.\n                    var apiURL = $phoebe.serverUrl + formatModelName(apistr);\n\n                    if (angular.isObject(wherestr) && !angular.isArray(wherestr)){\n                        // count condition\n                        if (wherestr.hasOwnProperty('count')){\n                            apiURL += '/count';\n                        }\n                        apiURL += formatWhereString(wherestr);\n                    }\n\n                    return chainRequest($http.get(apiURL));\n                }\n                /**\n                 * 添加记录方法，支持单条和批量添加，支持自定义接口\n                 * apistr为必传参数， 类型为String. eg：'/family', '/family/count', '/family/customInterface'\n                 * addlist为必传参数, 类型为Array，可传入单个或多条记录. eg: PhoebeService.create('/family', [item1, item2, item3])\n                 * @param apistr\n                 * @param addlist\n                 * @returns {*}\n                 */\n            function create(apistr, addlist) {\n                    if (!angular.isString(apistr) || apistr === '') return;\n                    if (!angular.isArray(addlist)) return;\n                    // Concat the apiurl.\n                    var apiurl = $phoebe.serverUrl + formatModelName(apistr);\n                    return chainRequest($http.post(apiurl, addlist));\n                }\n                /**\n                 * 更新记录方法，支持单条和批量更新，支持自定义接口\n                 * apistr为必传参数， 类型为String. eg：'/family', '/family/customInterface'\n                 * updatelist为必传参数, 类型为Array，可传入单个或多条记录. eg: PhoebeService.update('/family', [item1, item2, item3])\n                 * @param apistr\n                 * @param updatelist\n                 * @returns {{success: success, error: error}}\n                 */\n            function update(apistr, updatelist, pkfield) {\n                    // start\n                    if (!angular.isString(apistr) || apistr === '') return;\n                    if (!angular.isArray(updatelist)) return;\n                    // Concat the apiurl.\n                    var apiurl = $phoebe.serverUrl + formatModelName(apistr);\n                    // define a container for each request return value.\n                    var vals = [];\n                    // Send some of the request.\n                    angular.forEach(updatelist, function(updateItem) {\n                        vals.push($http.put(apiurl, updateItem));\n                    });\n                    return concurrentHanler($q, vals);\n                }\n                /**\n                 * 删除记录方法，支持单条和批量更新，支持自定义接口\n                 * apistr为必传参数， 类型为String. eg：'/family', '/family/customInterface'\n                 * destroyIdlist为必传参数, 类型为Array，可传入单个或多条记录的ID. eg: PhoebeService.destroy('/family', [\"1111\", \"2222\", \"3333\"])\n                 * @param apistr\n                 * @param destroyIdlist\n                 * @returns {Promise}\n                 */\n            function destroy(apistr, destroyIdlist) {\n                if (!angular.isString(apistr) || apistr === '') return;\n                // Concat the apiurl.\n                var apiurl = $phoebe.serverUrl + formatModelName(apistr);\n                // Define a container for each request return value.\n                function getDestroyListPromise(removelist) {\n                        // define a container for each request return value.\n                        var result = [];\n                        // Send some of the request.\n                        angular.forEach(removelist, function(removeitem) {\n                            var poie;\n                            if (angular.isString(removeitem)) poie = $http.delete(apiurl + '/' + removeitem);\n                            else if (angular.isObject(removeitem)) poie = $http.delete(apiurl + '/' + removeitem.id);\n                            result.push(poie);\n                        });\n                        return result;\n                    }\n                    // Judge, by id or by wherestr.\n                if (angular.isArray(destroyIdlist)) {\n                    return concurrentHanler($q, getDestroyListPromise(destroyIdlist));\n                } else if (angular.isObject(destroyIdlist)) {\n                    // After the request completed of the success handler.\n                    var successHandler;\n                    // After the request completed of the failure handler\n                    var errorHandler;\n                    // Execute.\n                    var promise = find(apistr, destroyIdlist);\n                    // Save the callback methods;\n                    promise.success = function(callback) {\n                        successHandler = callback;\n                        return promise;\n                    };\n                    promise.error = function(callback) {\n                        errorHandler = callback;\n                        return promise;\n                    };\n                    // The request processing.\n                    promise.then(function(successPromise) {\n                        // Find some data to remove.\n                        var removeList = successPromise.data;\n                        // Concurrent execution delete operation.\n                        promise = $q.all(getDestroyListPromise(removeList));\n                        // To callback\n                        promise.then(function(reslist) {\n                            // To wash data.\n                            var statuslist = [];\n                            angular.forEach(reslist, function(res) {\n                                statuslist.push(res.status);\n                            });\n                            // return;\n                            successHandler(statuslist);\n                        }, function(reslist) {\n                            // To wash data.\n                            var statuslist = [];\n                            angular.forEach(reslist, function(res) {\n                                statuslist.push(res.status);\n                            });\n                            // return;\n                            errorHandler(statuslist);\n                        });\n                    });\n                    return promise;\n                }\n            }\n\n            function customInterface(apistr, method, isPath, wherestr, reqdata) {\n                    if (!angular.isString(apistr) || apistr === '') return;\n                    // Concat the apiurl.\n                    var apiurl = $phoebe.serverUrl + formatModelName(apistr);\n                    // Add query conditions.\n                    if (angular.isObject(wherestr) && !angular.isArray(wherestr)) {\n                        apiurl += formatWhereString(wherestr);\n                    }\n                    // send request.\n                    var request;\n                    if (isPath) {\n                        apiurl = apiurl + \"/\" + reqdata;\n                        switch (method.toLowerCase()) {\n                            case 'get':\n                                request = $http.get(apiurl);\n                                break;\n                            case 'put':\n                                request = $http.put(apiurl);\n                                break;\n                            case 'post':\n                                request = $http.post(apiurl);\n                                break;\n                            case 'del':\n                                request = $http.delete(apiurl);\n                                break;\n                            case 'delete':\n                                request = $http.delete(apiurl);\n                                break;\n                        }\n                    } else {\n                        switch (method.toLowerCase()) {\n                            case 'get':\n                                request = $http.get(apiurl);\n                                break;\n                            case 'put':\n                                request = $http.put(apiurl, reqdata);\n                                break;\n                            case 'post':\n                                request = $http.post(apiurl, reqdata);\n                                break;\n                            case 'del':\n                                request = $http.delete(apiurl, reqdata);\n                                break;\n                            case 'delete':\n                                request = $http.delete(apiurl, reqdata);\n                                break;\n                        }\n                    }\n                    // return\n                    return chainRequest(request);\n                }\n                /**\n                 * Define some open interface.\n                 * 定义一些开放接口\n                 * @constructor\n                 */\n                // The constructor.\n            function HttpServiceFactory() {}\n                // define find api.\n            HttpServiceFactory.find = function(api, where) {\n                return find(api, where);\n            };\n            // define create api.\n            HttpServiceFactory.create = function(api, addlist) {\n                return create(api, addlist);\n            };\n            // define update api.\n            HttpServiceFactory.update = function(api, list, pkfield) {\n                return update(api, list, pkfield);\n            };\n            // define destroy api.\n            HttpServiceFactory.destroy = function(api, destroyIdlist) {\n                return destroy(api, destroyIdlist);\n            };\n            //\n            HttpServiceFactory.customInterface = function(api, method, isPath, where, reqdata) {\n                return customInterface(api, method, isPath, where, reqdata);\n            };\n            // return.\n            return HttpServiceFactory;\n        }\n        /**\n         * Sign up for a sub module of the phoebe on the angular.\n         * - Converts the server-side entity object to the front of physical resources.\n         */\n    angular.module('phoebe.resource', []).factory('PhoebeResource', modelResource);\n    /**\n     * Registered the model resource service on the phoebe.\n     * @type {string[]}\n     */\n    var resourceList = {};\n\n    function hasOwnResource(url) {\n        return resourceList.hasOwnProperty(url);\n    }\n    modelResource.$inject = ['PhoebeHttpService'];\n\n    function modelResource(PhoebeHttpService) {\n        function clearSaveData(list, params) {\n                var clearedList = [];\n                // Start this clear.\n                angular.forEach(list, function(item) {\n                    angular.forEach(params, function(param) {\n                        if (item.hasOwnProperty(param)) delete item[param];\n                    });\n                    clearedList.push(item);\n                });\n                // finish this clear.\n                return clearedList;\n            }\n            /**\n             * Define some open interface.\n             * 定义一些开放接口\n             * @param url\n             * @constructor\n             */\n            // The constructor.\n        function ResourceFactory(url, PKField) {\n                if (hasOwnResource(url)) {\n                    return resourceList[url];\n                } else {\n                    this.url = url;\n                    this.include = null;\n                    this.wherestr = null;\n                    this.pkfield = (PKField) ? PKField : 'id';\n                    resourceList[this.url] = this;\n                }\n            }\n            // Grafting prototype.\n        ResourceFactory.prototype.query = function(wherestr) {\n            // Save the data need to be cleaned.\n            if (angular.isObject(wherestr)) {\n                this.include = wherestr.include;\n                this.wherestr = wherestr;\n            }\n\n            return PhoebeHttpService.find(this.url, wherestr);\n        };\n        //\n        ResourceFactory.prototype.save = function(items) {\n            items = angular.copy(items);\n            // The cleared list.\n            if (this.include) items = clearSaveData(items, this.include);\n            return PhoebeHttpService.update(this.url, items, this.pkfield);\n        };\n        //\n        ResourceFactory.prototype.delete = function(ids) {\n            ids = angular.copy(ids);\n            return PhoebeHttpService.destroy(this.url, ids);\n        };\n        ResourceFactory.prototype.setInterface = function(config) {\n            var parent = this;\n            angular.forEach(config, function(cfg, interfaceName) {\n                parent[interfaceName] = function(wherestr, reqdata) {\n                    //\n                    var reqApiUrl = this.url + '/' + interfaceName;\n                    var methodval = (cfg.hasOwnProperty('method')) ? cfg.method : 'get';\n                    var isPathParam = (cfg.hasOwnProperty('path')) ? cfg.path : false;\n                    //\n                    return PhoebeHttpService.customInterface(reqApiUrl, methodval, isPathParam, wherestr, reqdata);\n                };\n            });\n            // 缓存\n            resourceList[this.url] = this;\n            return this;\n        };\n        return ResourceFactory;\n    }\n})(window, window.angular);"],"sourceRoot":"../src/scripts"}