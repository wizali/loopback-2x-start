{"version":3,"sources":["phoebe.js","phoebe.utils.js","phoebe.cache.js","phoebe.controller.js","phoebe.dict.js","phoebe.service.js"],"names":["window","angular","initConfigurationPhase","initOperationPhase","$phoebe","initList","this","$get","preinit","module","config","isDefined","dependencies","cons","context","constant","value","provider","run","directive","$compile","restrict","scope","transclude","compile","tEle","console","log","html","pre","iEle","post","append","template","$inject","dateFormatFilter","DateFormat","val","format","reg","RegExp","test","toString","length","getDate","measureFormatFilter","MeasureFormat","decimals","startUnit","unit","Number","result","toByteConv","toFrequencyConv","DateFormatProvider","toSeconds","ms","Math","floor","date","str","Date","o","M+","getMonth","d+","h+","getHours","m+","getMinutes","s+","getSeconds","q+","S","getMilliseconds","T","getTime","replace","$1","getFullYear","substr","k","getTodayTimeInterval","sdate","setHours","startTime","cdate","endTime","getMonthTimeInterval","setDate","setMonth","getYearTimeInterval","getWeekTimeInterval","issunday","getDay","MeasureFormatProvider","toUtilization","num","toFixed","sizeConversion","size","targetUnit","units","theUnit","indexOf","mapService","mapFactory","keys","values","put","key","hasOwnKey","push","get","remove","index","splice","each","callback","len","i","entrys","Array","element","sortASC","sort","a","b","sortDESC","hasOwnProperty","clear","isEmpty","filter","factory","undefined","loadingDictionary","dicts","PhoebeDict","dataProvider","broadcastEvent","preload","success","data","forEach","item","paramName","getForeignKey","Event","DICT_LOADED","error","loadingOptionData","options","PhoebeResource","q","resoure","isArray","vals","opt","modelName","model","match","PK","name","id","wherestr","where","trigger","promise","query","datalist","pkfield","all","then","OPTION_LOADED","createCrudMethod","dataSourceName","selectedItems","broadcast","primaryKeyField","selectedHandler","fkval","optionName","includeName","selectedItem","linkname","addHandler","resetHandler","response","optype","ADDING","MODEL_OPERATION","modifyHandler","itemIndex","copy","MODIFYING","savingHandler","SAVING","beforeEvent","defaultPrevented","saveHandler","save","include","isModify","unshift","SAVED","removeHandler","REMOVING","deleteHandler","delete","msg","DELETED","markSelectedHandler","exists","batchRemoveHandler","BATCH_REMOVING","batchDeleteHandler","idx","queryDataHandler","c","paginObj","pagination","queryObj","e","page","rows","limit","skip","MODEL_LOADED","count","RESET","methodNames","Add","Modify","Saving","Save","Reset","Remove","Delete","MarkSelected","BatchRemove","BatchDelete","QueryData","callName","setSelected","phoebeControllerService","$q","type","$broadcast","createModel","modelResource","isMultiple","interface","face","setInterface","openInterface","scopeSource","isObject","$dataProvider","$model","$resoure","$resource","prototype","BATCH_DELETED","service","loadDataDictionary","dictlist","existingList","err","querylist","hasOwnDictionary","dictCache","dictResource","errorHandler","queryKey","list","dictForeignKey","fun","getDictionaryValue","dict","showfield","valueField","opts","optionsField","keyField","dictName","PhoebeDictFactory","dictConfig","method","foreignKey","isString","getDict","getDictValue","dictFormatFilter","formatWhereString","fkid","hasmany","logic","Object","or","and","neq","between","field","order","isNumber","like","lt","gt","formatModelName","apiname","inflectionPluralize","word","inflection","pluralize","concurrentHanler","reslist","res","status","errs","chainRequest","successHandler","er","configuration","httpService","$http","find","apistr","apiURL","serverUrl","create","addlist","apiurl","update","updatelist","updateItem","destroy","destroyIdlist","getDestroyListPromise","removelist","removeitem","poie","successPromise","removeList","statuslist","customInterface","isPath","reqdata","request","toLowerCase","HttpServiceFactory","api","hasOwnResource","url","resourceList","PhoebeHttpService","clearSaveData","params","clearedList","param","ResourceFactory","PKField","items","ids","parent","cfg","interfaceName","reqApiUrl","methodval","isPathParam","path"],"mappings":"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","file":"phoebe.min.js","sourcesContent":["/**\n * Created by felix on 10/17/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    /**\n     * Some dependent module of the phoebe.\n     * - Please note that the loading sequence.\n     * - You sould define it like this: {mainModuleName}.{subModuleName}\n     * @type {string[]}\n     */\n    var dependencies = [\n        'phoebe.utils',\n        'phoebe.httpService',\n        'phoebe.resource',\n        'phoebe.dict',\n        'phoebe.controller'\n    ];\n\n    /**\n     * Some of the global static constants of the phoebe.\n     * - These of the constants value are can't be changed.\n     * - These values are often used in configuration phase.\n     * - You sould define it like this: {parameterName} : {parameterValue}\n     * @type {{}}\n     */\n    var cons = {};\n\n    /**\n     * Some global variables of the phoebe.\n     * - These of the variables are can be changed.\n     * - These values are often used in operation phase.\n     * - You sould define it like this: {parameterName} : {parameterValue}\n     * @type {{}}\n     */\n    var context = {};\n\n\n    /**\n     * Sign up for a main module of the phoebe on the angular.\n     */\n    angular.module('phoebe', dependencies)\n        .constant('PhoebeCons', cons)\n        .value('PhoebeContext', context)\n        .config(initConfigurationPhase)\n        .provider('$phoebe', $phoebe)\n        .run(initOperationPhase)\n\n        .directive('levelOne', ['$compile', function ($compile) {\n            return {\n                restrict: 'E',\n                scope: true,\n                transclude: 'tEle',\n                compile: function (tEle, tAttrs, trans) {\n                    console.log('compile→' + 'levelOne' + tEle.html());\n                    return {\n                        pre: function (scope, iEle, iAttrs) {\n                            console.log('pre→' + 'levelOne' + iEle.html());\n                        },\n                        post: function (scope, iEle, iAttrs) {\n                            iEle.append('<level:two></level:two>');\n                            $compile(iEle);\n                            console.log('post→' + 'levelOne' + iEle.html());\n                        }\n                    };\n                }\n            };\n        }])\n        .directive('levelTwo', function () {\n            return {\n                restrict: 'E',\n                scope: true,\n                transclude: 'tEle',\n                compile: function (tEle, tAttrs, trans) {\n                    tEle.append('<level:three></level:three>');\n                    console.log('compile→' + 'levelTwo' + tEle.html());\n                    return {\n                        pre: function (scope, iEle, iAttrs) {\n                            console.log('pre→' + 'levelTwo' + iEle.html());\n                        },\n                        post: function (scope, iEle, iAttrs) {\n                            console.log('post→' + 'levelTwo' + iEle.html());\n                        }\n                    };\n                }\n            };\n        })\n        .directive('levelThree', function () {\n            return {\n                restrict: 'E',\n                template: 'hello,111111',\n                scope: true,\n                transclude: 'tEle',\n                compile: function (tEle, tAttrs, trans) {\n                    console.log('compile→' + 'levelThree' + tEle.html());\n                    return {\n                        pre: function (scope, iEle, iAttrs) {\n                            console.log('pre→' + 'levelThree' + iEle.html());\n                        },\n                        post: function (scope, iEle, iAttrs) {\n                            console.log('post→' + 'levelThree' + iEle.html());\n                        }\n                    };\n                }\n            };\n        });\n\n    /**\n     * Perform the configuration phase of the work.\n     */\n\n    function initConfigurationPhase() {\n\n    }\n\n    initConfigurationPhase.$inject = [];\n\n    /**\n     * Perform the configuration phase of the work.\n     */\n    initOperationPhase.$inject = [];\n    function initOperationPhase() {\n\n    }\n\n    /**\n     * Create Phoebe's service.\n     */\n    $phoebe.$inject = [];\n    function $phoebe() {\n        /**\n         * Cache configuration information.\n         * @type {{}}\n         */\n        var initList = {};\n        this.$get = function () {\n            return initList;\n        };\n\n        /**\n         * When phoebe start, inject the necessary configuration information.\n         * The injection process can only be done in the config method.\n         * @param module\n         * @param config\n         * @returns {$phoebe}\n         */\n        this.preinit = function (module, config) {\n            // Save the config info.\n            if (angular.isDefined(module) && angular.isDefined(config)) {\n                initList[module] = config;\n            }\n            return this;\n        };\n    }\n\n})(window, window.angular);","/**\n * Created by felix on 10/17/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    /**\n     * Sign up for a sub module of the phoebe on the angular.\n     * - The client universal tool.\n     */\n    angular.module('phoebe.utils', []).\n        provider('DateFormat'    , DateFormatProvider).\n        provider('MeasureFormat' , MeasureFormatProvider).\n        filter('dateFormat'      , dateFormatFilter).\n        filter('measureFormat'   , measureFormatFilter).\n        factory('Map',             mapService);\n\n    /**\n     * 日期转换，于date过滤器的唯一区别，就是该日期，支持10位自1970年的秒数转换\n     */\n    dateFormatFilter.$inject = ['DateFormat'];\n    function dateFormatFilter(DateFormat) {\n        return function (val, format) {\n            if (!format || '') format = 'yyyy-MM-dd';\n            var reg = new RegExp('^[0-9]*$');\n            if (reg.test(val) && val.toString().length === 10) {\n                val = val * 1000;\n            }\n            return DateFormat.getDate(val, format);\n        };\n    }\n\n    /**\n     * 大小计算，目前支持两种单位，byte于hz的大小转换，其中，只处理数字，对于由字母组成的值则原样输出\n     */\n    measureFormatFilter.$inject = ['MeasureFormat'];\n    function measureFormatFilter(MeasureFormat) {\n        return function (val, decimals, startUnit, unit) {\n            val = Number(val);\n            unit = (unit) ? unit : 'B';\n            decimals = (decimals) ? decimals : 1;\n            var result;\n            var reg = new RegExp('^[0-9]*$');\n            if (reg.test(val)) {\n                switch (unit) {\n                    case 'B' :\n                        result = MeasureFormat.toByteConv(val, startUnit, decimals);\n                        break;\n                    case 'hz'   :\n                        result = MeasureFormat.toFrequencyConv(val, startUnit, decimals);\n                        break;\n                }\n            } else {\n                result = val;\n            }\n            return result;\n        };\n    }\n\n    /**\n     * 日期格式化工具\n     * @constructor\n     */\n    function DateFormatProvider () {\n        /**\n         * Get a instance by this method.\n         * @returns {*}\n         */\n        this.$get = function () {\n            return this;\n        };\n        /**\n         * Format to seconds.\n         * @param ms - 传入毫秒数或秒数\n         * @returns {*}\n         */\n        this.toSeconds = function (ms) {\n            if (!ms) return 0;\n            if (ms.toString().length == 13) {\n                ms = Math.floor(ms / 1000);\n            } else if (ms.toString().length == 10) {\n                ms = ms * 1000;\n            }\n            return ms;\n        };\n        /**\n         * 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，\n         * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\n         * 例子：\n         * (new Date()).Format(\"yyyy-MM-dd hh:mm:ss.S\") ==> 2006-07-02 08:09:04.423\n         * (new Date()).Format(\"yyyy-M-d h:m:s.S\")      ==> 2006-7-2 8:9:4.18\n         * @param date  , 传入的日期对象或日期字符串或毫秒数\n         * @param str   , 日期的格式\n         * @returns String\n         */\n        this.getDate = function (date, str) {\n            //\n            if (date) {\n                date = new Date(date);\n            } else {\n                date = new Date();\n            }\n            //\n            if (!str)  str = 'yyyy-MM-dd hh:mm:ss.S [T]';\n\n            var o = {\n                'M+': date.getMonth() + 1,                 //月份\n                'd+': date.getDate(),                    //日\n                'h+': date.getHours(),                   //小时\n                'm+': date.getMinutes(),                 //分\n                's+': date.getSeconds(),                 //秒\n                'q+': Math.floor((date.getMonth() + 3) / 3), //季度\n                'S': date.getMilliseconds(),            //毫秒\n                'T': date.getTime()                     //自1970年以来的毫秒数\n            };\n            if (/(y+)/.test(str))\n                str = str.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n            for (var k in o) {\n                if (new RegExp('(' + k + ')').test(str))\n                    str = str.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : ((\"00\" + o[k]).substr(('' + o[k]).length)));\n            }\n            return str;\n        };\n        /**\n         * Get the today of the time-interval.\n         * @returns {{}}\n         */\n        this.getTodayTimeInterval = function () {\n            var result = {};\n            // get 0 o'clock\n            var sdate = new Date();\n            sdate.setHours(0, 0, 0, 0);\n            result.startTime = sdate.getTime();\n            //console.log(sdate.getFullYear(),sdate.getMonth()+1,sdate.getDate(),sdate.getHours(),sdate.getMinutes(),sdate.getSeconds(),sdate.getMilliseconds());\n            // get 24 o'clock\n            var cdate = new Date();\n            cdate.setHours(24, 0, 0, 0);\n            result.endTime = cdate.getTime();\n            //console.log(cdate.getFullYear(),cdate.getMonth()+1,cdate.getDate(),cdate.getHours(),cdate.getMinutes(),cdate.getSeconds(),cdate.getMilliseconds());\n            return result;\n        };\n        /**\n         * Get first and last days of the this month.\n         * @returns {{}}\n         */\n        this.getMonthTimeInterval = function () {\n            var result = {};\n            // get the first day of this month.\n            var sdate = new Date();\n            sdate.setDate(1);\n            sdate.setHours(0, 0, 0, 0);\n            result.startTime = sdate.getTime();\n            //console.logend(sdate.getFullYear(),sdate.getMonth()+1,sdate.getDate(),sdate.getHours(),sdate.getMinutes(),sdate.getSeconds(),sdate.getMilliseconds());\n            // get the last day of this month.\n            var cdate = new Date();\n            cdate.setMonth(cdate.getMonth() + 1, 0);\n            cdate.setHours(24, 0, 0, 0);\n            result.endTime = cdate.getTime();\n            //console.log(cdate.getFullYear(),cdate.getMonth()+1,cdate.getDate(),cdate.getHours(),cdate.getMinutes(),cdate.getSeconds(),cdate.getMilliseconds());\n            return result;\n        };\n        /**\n         * Get first and last days of the this year.\n         * @returns {{}}\n         */\n        this.getYearTimeInterval = function () {\n            var result = {};\n            // get the first day of this year.\n            var sdate = new Date();\n            sdate.setMonth(0, 1);\n            sdate.setHours(0, 0, 0, 0);\n            result.startTime = sdate.getTime();\n            //console.log(sdate.getFullYear(),sdate.getMonth()+1,sdate.getDate(),sdate.getHours(),sdate.getMinutes(),sdate.getSeconds(),sdate.getMilliseconds());\n            // get the last day of this year.\n            var cdate = new Date();\n            cdate.setMonth(12, 0);\n            cdate.setHours(24, 0, 0, 0);\n            result.endTime = cdate.getTime();\n            //console.log(cdate.getFullYear(),cdate.getMonth()+1,cdate.getDate(),cdate.getHours(),cdate.getMinutes(),cdate.getSeconds(),cdate.getMilliseconds());\n            return result;\n        };\n        // Get weekdate.\n        /**\n         * Get first and last days of the this week.\n         * @returns {{}}\n         */\n        this.getWeekTimeInterval = function () {\n            var issunday = (new Date().getDay() === 0) ? true : false;\n            var result = {};\n            // get the first day of this week.\n            var sdate = new Date();\n            if (issunday) {\n                sdate.setDate(sdate.getDate() - 6);\n                sdate.setHours(0, 0, 0, 0);\n            } else {\n                sdate.setDate(sdate.getDate() - sdate.getDay() + 1);\n                sdate.setHours(0, 0, 0, 0);\n            }\n            //console.log(sdate.getFullYear(),sdate.getMonth()+1,sdate.getDate(),sdate.getHours(),sdate.getMinutes(),sdate.getSeconds(),sdate.getMilliseconds());\n            result.startTime = sdate.getTime();\n            // get the last day of this week.\n            var cdate = new Date();\n            if (issunday) {\n                cdate.setHours(24, 0, 0, 0);\n            } else {\n                cdate.setDate(sdate.getDate() + (7 - sdate.getDay()));\n                cdate.setHours(24, 0, 0, 0);\n            }\n            //console.log(cdate.getFullYear(),cdate.getMonth()+1,cdate.getDate(),cdate.getHours(),cdate.getMinutes(),cdate.getSeconds(),cdate.getMilliseconds());\n            result.endTime = cdate.getTime();\n            return result;\n        };\n    }\n\n    /**\n     * 尺寸数据格式化工具\n     * @constructor\n     */\n    function MeasureFormatProvider() {\n\n        /**\n         * Get a instance by this method.\n         * @returns {*}\n         */\n        this.$get = function () {\n            return this;\n        };\n        /**\n         * Formatted as percentage.\n         * @param num ,待格式化的数字\n         * @returns {number}\n         */\n        this.toUtilization = function (num) {\n            if (!num) return 0;\n            return (num / 100).toFixed(1);\n        };\n        /**\n         * 单位计算，支持定义消暑保留长度，定义起始和目标单位，按1024自动进位\n         * @param size ,大小计数\n         * @param unit ,计数单位， 默认为字节B\n         * @param decimals ,小数点后保留的位数，默认保留一位\n         * @param targetUnit, 转换的目标单位， 默认自动进位\n         * @param units , 单位集合\n         */\n        this.sizeConversion = function (size, unit, decimals, targetUnit, units) {\n            if (!size) return 0;\n            // Set default value.\n            unit = (unit) ? unit : units[0];\n            decimals = (decimals) ? decimals : 1;\n            targetUnit = (targetUnit) ? targetUnit : 'auto';\n            var theUnit = units.indexOf(unit);\n            // Whether auto carry.\n            if (targetUnit !== 'auto')\n                targetUnit = units.indexOf(targetUnit);\n            // To conversion\n            while (size >= 1024) {\n                size /= 1024;\n                theUnit++;\n                if (theUnit === targetUnit)\n                    break;\n            }\n            return size.toFixed(decimals) + ' ' +units[theUnit];\n        };\n        /**\n         * 容量计算\n         * @param size\n         * @param unit\n         * @param decimals\n         * @param targetUnit\n         * @returns {string}\n         */\n        this.toByteConv = function (size, unit, decimals, targetUnit) {\n            var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB'];\n            return this.sizeConversion(size, unit, decimals, targetUnit, units);\n        };\n        /**\n         * 主频计算\n         * @param size\n         * @param unit\n         * @param decimals\n         * @param targetUnit\n         * @returns {string}\n         */\n        this.toFrequencyConv = function (size, unit, decimals, targetUnit) {\n            var units = ['Hz', 'KHz', 'MHz', 'GHz', 'THz', 'PHz', 'EHz'];\n            return this.sizeConversion(size, unit, decimals, targetUnit, units);\n        };\n\n    }\n\n    /**\n     * MAP对象，实现MAP功能\n     *\n     * 接口：\n     * size()     获取MAP元素个数\n     * isEmpty()    判断MAP是否为空\n     * clear()     删除MAP所有元素\n     * put(key, value)   向MAP中增加元素（key, value)\n     * remove(key)    删除指定KEY的元素，成功返回True，失败返回False\n     * get(key)    获取指定KEY的元素值VALUE，失败返回NULL\n     * each(callback)  遍历Map,执行处理函数\n     * entrys()        获取键值数组\n     * element(index)   获取指定索引的元素（使用element.key，element.value获取KEY和VALUE），失败返回NULL\n     * hasOwnKey(key)  判断MAP中是否含有指定KEY的元素\n     * hasOwnValue(value) 判断MAP中是否含有指定VALUE的元素\n     * values()    获取MAP中所有VALUE的数组（ARRAY）\n     * keys()     获取MAP中所有KEY的数组（ARRAY）\n     * toString()\n     *\n     * 例子：\n     * var map = new Map();\n     *\n     * map.put(\"key\", \"value\");\n     * var val = map.get(\"key\")\n     * ……\n     *\n     */\n    function mapService(){\n\n        var mapFactory = function (){};\n\n        /** 存放键的数组(遍历用到) */\n        mapFactory.keys = [];\n        /** 存放数据 */\n        mapFactory.values = {};\n\n        // format object to map.\n\n        /**\n         * 放入一个键值对\n         * @param {String} key\n         * @param {Object} value\n         */\n        mapFactory.put = function(key, value) {\n\n            if(!this.hasOwnKey(key)){\n                this.keys.push(key);\n            }\n            this.values[key] = value;\n        };\n\n        /**\n         * 获取某键对应的值\n         * @param {String} key\n         * @return {Object} value\n         */\n        mapFactory.get = function(key) {\n            return this.values[key];\n        };\n\n        /**\n         * 删除一个键值对\n         * @param {String} key\n         */\n        mapFactory.remove = function(key) {\n            var index = this.keys.indexOf(key);\n            if(index > -1)\n                this.keys.splice(index, 1);\n            delete this.values[key];\n        };\n\n        /**\n         * 遍历Map,执行处理函数\n         *\n         * @param {Function} 回调函数 function(key,value,index){..}\n         */\n        mapFactory.each = function(callback){\n            if(typeof callback != 'function'){\n                return;\n            }\n            var len = this.keys.length;\n            for(var i=0;i<len;i++){\n                var k = this.keys[i];\n                callback(k,this.values[k],i);\n            }\n        };\n\n        /**\n         * 获取键值数组(类似Java的entrySet())\n         * @return 键值对象{key,value}的数组\n         */\n        mapFactory.entrys = function() {\n            var len = this.keys.length;\n            var entrys = new Array(len);\n            for (var i = 0; i < len; i++) {\n                var k = this.keys[i];\n                entrys[i] = {\n                    key : k,\n                    value : this.values[k]\n                };\n            }\n            return entrys;\n        };\n\n        /**\n         * 根据索引号查找对应的键值对对象\n         * @param index\n         * @returns {*}\n         */\n        mapFactory.element = function(index){\n            var len =this.keys.length;\n            if(index >= len)\n                return null;\n            return {\n                key : this.keys[index],\n                value : this.values[this.keys[index]]\n            };\n        };\n\n        /**\n         * 如果数组为数字型数组，则进行从小到大的排序\n         * @returns {Array}\n         */\n        mapFactory.sortASC = function(){\n            this.keys.sort(function(a,b){return a>b?1:-1;});\n            return this.entrys();\n        };\n\n        mapFactory.sortDESC = function(){\n            return this.keys.sort(function(a,b){return a<b?1:-1;});\n        };\n\n        /**\n         * 判断是否存在\n         * @param key\n         * @returns {*|boolean}\n         */\n        mapFactory.hasOwnKey = function(key){\n            return this.values.hasOwnProperty(key);\n        };\n\n        /**\n         * 清空Map\n         */\n        mapFactory.clear = function(){\n            this.keys = [];\n            this.values = {};\n        };\n\n\n        /**\n         * 判断Map是否为空\n         */\n        mapFactory.isEmpty = function() {\n            return this.keys.length === 0;\n        };\n\n        /**\n         * 获取键值对数量\n         */\n        mapFactory.size = function(){\n            return this.keys.length;\n        };\n\n        /**\n         * 重写toString\n         */\n        /*this.toString = function(){\n         var s = \"{\";\n         for(var i=0;i<this.keys.length;i++,s+=','){\n         var k = this.keys[i];\n         s += k+\"=\"+this.values[k];\n         }\n         s+=\"}\";\n         return s;\n         };*/\n\n        return mapFactory;\n\n    }\n\n})(window, window.angular);\n\n\n/*\nvar utilsInjector = angular.injector(['phoebe.utils']);\nvar modelFormat = utilsInjector.get('ModelFormat');\nutilsInjector.invoke(['PhoebeContext', function(PhoebeContext){\n    console.log(PhoebeContext);\n}]);*/\n\n","/**\n * Created by felix on 11/6/14.\n */\n","/**\n * Created by felix on 10/23/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n(function(window, angular, undefined) {\n    'use strict';\n    /**\n     * Define some of the event type of the controller.\n     * @type {{DICT_LOADED: string, OPTION_LOADED: string}}\n     */\n    var Event = {\n        DICT_LOADED: 'dictLoadingCompleted',\n        OPTION_LOADED: 'optionLoadingCompleted',\n        MODEL_LOADED: 'modelLoadingCompleted',\n        MODEL_OPERATION: 'modelOperation'\n    };\n    var optype = {\n        ADDING: 'adding',\n        MODIFYING: 'modifying',\n        SAVING: 'saving',\n        SAVED: 'saved',\n        REMOVING: 'removing',\n        DELETED: 'deleted',\n        BATCH_REMOVING: 'batchRemoving',\n        BATCH_DELETED: 'batchDeleted',\n        RESET: 'reset'\n    };\n\n    /**\n     * Lots of the dictionaries are loading.\n     * When all of some dictionary are loading completed, to broadcast event.\n     * @param dicts\n     * @param PhoebeDict\n     * @param dataProvider\n     * @param broadcastEvent\n     */\n    function loadingDictionary(dicts, PhoebeDict, dataProvider, broadcastEvent) {\n        // Whether or not to continue.\n        if (!dicts) return;\n            // Start preloading to the dictionary.\n            PhoebeDict.preload(dicts).success(function(data) {\n                // Cache dictionary items in $scope.\n                angular.forEach(data, function(item) {\n                    var paramName = item[PhoebeDict.getForeignKey()];\n                    dataProvider[paramName] = item;\n                });\n                // To broadcast the loading completed event.\n                broadcastEvent(Event.DICT_LOADED, true);\n            }).error(function(data) {\n                dataProvider.error = data;\n                // To broadcast the loading completed event.\n                broadcastEvent(Event.DICT_LOADED, false);\n            });\n    }\n    /**\n     * Lots of the options are loading.\n     * When all of some options are loading completed, to broadcast event.\n     * @param options\n     * @param PhoebeResource\n     * @param q\n     * @param dataProvider\n     * @param resoure\n     * @param broadcastEvent\n     */\n    var reg = new RegExp(\"[^/]+\");\n\n    function loadingOptionData(options, PhoebeResource, q, dataProvider, resoure, broadcastEvent) {\n            // Whether or not to continue.\n            if (angular.isArray(options)) {\n                // Save lots of options data\n                var vals = [];\n                angular.forEach(options, function(opt) {\n                    // The option handler.\n                    if (opt.hasOwnProperty('model')) {\n                        // To obtain the model name as a quote name.\n                        var modelName = opt.model.match(reg)[0];\n                        // Cache resoure service of the model.\n                        resoure[modelName] = new PhoebeResource(opt.model, (opt.hasOwnProperty('PK')) ? opt.PK : undefined);\n                        // 分支判断，如果拥有trigger属性\n                        if (opt.hasOwnProperty('trigger')) {\n                            // 创建可触发的options对象\n                            if (opt.hasOwnProperty('name')) dataProvider[opt.name] = [];\n                            // 在resoure中，增加可调用的触发器，以实现级联操作\n                            resoure[opt.name + 'Trigger'] = function(id) {\n                                if (opt.hasOwnProperty('wherestr')) {\n                                    if (!opt.wherestr.hasOwnProperty('where')) {\n                                        opt.wherestr.where = {};\n                                    }\n                                    opt.wherestr.where[opt.trigger] = id;\n                                } else {\n                                    var wherestr = {};\n                                    wherestr.where = {};\n                                    wherestr.where[opt.trigger] = id;\n                                    opt.wherestr = wherestr;\n                                }\n                                // 发起请求\n                                var promise = resoure[modelName].query(opt.wherestr);\n                                promise.success(function(datalist) {\n                                    dataProvider[opt.name] = datalist;\n                                    dataProvider[opt.name].PK = resoure[modelName].pkfield;\n                                });\n                                return promise;\n                            };\n                        } else {\n                            // 创建普通的options对象\n                            // To joint where string.\n                            var wherestr = {};\n                            if (opt.hasOwnProperty('wherestr')) {\n                                wherestr = opt.wherestr;\n                            }\n                            // To send request.\n                            var promise = resoure[modelName].query(wherestr);\n                            promise.success(function(datalist) {\n                                if (opt.hasOwnProperty('name')) {\n                                    dataProvider[opt.name] = datalist;\n                                    dataProvider[opt.name].PK = resoure[modelName].pkfield;\n                                }\n                            });\n                            // Save object of the promise.\n                            vals.push(promise);\n                        }\n                    }\n                });\n                // All of the request of handler.\n                var promise = q.all(vals);\n                promise.then(function(datalist) {\n                    broadcastEvent(Event.OPTION_LOADED, true);\n                }, function(msg) {\n                    broadcastEvent(Event.OPTION_LOADED, false);\n                });\n            } else {}\n        }\n        /**\n         * 自动创建实体模型对象的可调用方法\n         * @param resoure\n         * @param modelName\n         * @param dataSourceName\n         * @param selectedItems\n         * @param model\n         * @param dataProvider\n         * @param broadcast\n         */\n    function createCrudMethod(resoure, modelName, dataSourceName, selectedItems, model, dataProvider, broadcast, primaryKeyField) {\n            // 定义各实体模型对象，在执行操作后的响应返回对象\n            var response = {\n                success: false, // 操作是否成功\n                model: modelName, // 执行该操作的实体模型对象\n                optype: null, // 已执行的操作的操作类型\n                trigger: null, // 由哪个操作出发\n                data: null // 无论操作成功还是失败，返回的结果数据\n            };\n            // 定义需要创建的CRUD方法\n            var methodNames = {\n                Add: addHandler, // 添加记录触发器\n                Modify: modifyHandler, // 修改记录触发器\n                Saving: savingHandler, // 执行保存记录操作\n                Save: saveHandler, // 执行保存记录操作\n                Reset: resetHandler, // 复位被编辑的记录对象\n                Remove: removeHandler, // 移除记录触发器\n                Delete: deleteHandler, // 执行删除记录操作\n                MarkSelected: markSelectedHandler, // 对记录打选中标记\n                BatchRemove: batchRemoveHandler, // 批量移除记录触发器\n                BatchDelete: batchDeleteHandler, // 批量删除记录操作\n                QueryData: queryDataHandler\n            };\n            // 在resoure里，为modelname实体对象模型注册可调用的方法\n            angular.forEach(methodNames, function(val, key) {\n                var callName = modelName + key;\n                resoure[callName] = val;\n            });\n            // 为所有实体模型对象注册通用的下拉选单选中操作\n            resoure.setSelected = selectedHandler;\n            /**\n             * Define a handler of select the operating.\n             * @param fkval - 选中对象的外键id值\n             * @param optionName  -  该选项从属于那个options，该options在preload阶段被初始化\n             * @param includeName  - 该选项对应的关联实体对象\n             */\n            function selectedHandler(fkval, optionName, includeName) {\n                    // 三个参数必须全部被引入\n                    if (!angular.isDefined(fkval) || !angular.isDefined(optionName) || !angular.isDefined(includeName)) return;\n                    // 如果在数据源列表中，找到了所属的options，则继续执行\n                    if (dataProvider.hasOwnProperty(optionName)) {\n                        // 从数据源列表中，找到被选中的数据，并缓存至数据源对应的数据源项的属性上，并建立于wherestr之间的关系，关系缓存在linkname中\n                        for (var i = 0; i < dataProvider[optionName].length; i++) {\n                            var pkfield = (dataProvider[optionName].PK) ? dataProvider[optionName].PK : 'id';\n                            if (fkval == dataProvider[optionName][i][pkfield]) {\n                                dataProvider[optionName].selectedItem = dataProvider[optionName][i];\n                                dataProvider[optionName].linkname = includeName;\n                                break;\n                            }\n                        }\n                    }\n                }\n                /**\n                 * Define a trigger of add the operating.\n                 * 负责派发该ADDING事件\n                 * 注意：如果该事件被标识为已处理，则直接触发保存操作\n                 */\n            function addHandler() {\n                    resetHandler();\n                    response.trigger = optype.ADDING;\n                    response.optype = optype.ADDING;\n                    broadcast(Event.MODEL_OPERATION, response);\n                    /*var beforeEvent  = broadcast(Event.MODEL_OPERATION, response);\n                    if(beforeEvent.defaultPrevented) {\n                        saveHandler();\n                    }*/\n                }\n                /**\n                 * Define a trigger of modify the operating.\n                 * 负责派发该MODIFYING事件\n                 * 注意：如果该事件被标识为已处理，则直接触发保存操作\n                 */\n            var itemIndex; // 当前操作的选中\n            function modifyHandler(index) {\n                    itemIndex = index;\n                    model[modelName] = angular.copy(model[dataSourceName][index]);\n                    //\n                    response.trigger = optype.MODIFYING;\n                    response.optype = optype.MODIFYING;\n                    response.index = index;\n                    broadcast(Event.MODEL_OPERATION, response);\n                    /*var beforeEvent  = broadcast(Event.MODEL_OPERATION, response);\n                    if(beforeEvent.defaultPrevented) {\n                        saveHandler();\n                    }*/\n                }\n                /**\n                 * The save mothed of the entity object.\n                 * 默认提交model[modelName]对象进行保存\n                 * 保存成功后，根据include的关系，找到对应的关联对象\n                 * 对保存成功返回的数据，进行追加关联对象操作，最后派发保存成功事件\n                 */\n            function savingHandler() {\n                response.optype = optype.SAVING;\n                var beforeEvent = broadcast(Event.MODEL_OPERATION, response);\n                if (beforeEvent.defaultPrevented) {\n                    saveHandler();\n                }\n            }\n\n            function saveHandler() {\n                    // 保存数据\n                    resoure[modelName].save([model[modelName]]).success(function(datalist) {\n                        // 根据该实体模型的resoure对象中的wherestr中的include属性值，找到需要关联的目标对象，将其注册到保存成功对象中\n                        if (resoure[modelName].hasOwnProperty('include')) {\n                            angular.forEach(resoure[modelName].include, function(includeName) {\n                                // 如果下拉选单未修改，则使用提交时的数据\n                                datalist[0][includeName] = model[modelName][includeName];\n                                // 如果下拉选单被修改，则查找选中的数据\n                                for (var item in dataProvider) {\n                                    if (dataProvider[item].hasOwnProperty('linkname')) {\n                                        if (includeName == dataProvider[item].linkname) {\n                                            // 如果值被改变，则赋值，否则原样输出\n                                            if (dataProvider[item].selectedItem) {\n                                                datalist[0][includeName] = dataProvider[item].selectedItem;\n                                                // 复位\n                                                dataProvider[item].selectedItem = null;\n                                            }\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                        var isModify = (response.trigger == optype.MODIFYING);\n                        // 判断新增或是修改\n                        if (isModify)\n                        // 更新数据源列表\n                            model[dataSourceName][itemIndex] = datalist[0];\n                        else\n                        // 更新数据源列表\n                            model[dataSourceName].unshift(datalist[0]);\n                        // 返回值赋值操作\n                        response.success = true;\n                        response.data = datalist[0];\n                        // 复位表单\n                        resetHandler();\n                        response.optype = optype.SAVED;\n                        broadcast(Event.MODEL_OPERATION, response);\n                    }).error(function(msg) {\n                        response.optype = optype.SAVED;\n                        broadcast(Event.MODEL_OPERATION, response);\n                    });\n                }\n                /**\n                 * Define a trigger of remove the operating.\n                 * 负责派发REMOVING事件\n                 * 注意：如果该事件被标识为已处理，则直接触发删除操作\n                 */\n            function removeHandler(index) {\n                    response.optype = optype.REMOVING;\n                    response.index = index;\n                    var beforeEvent = broadcast(Event.MODEL_OPERATION, response);\n                    if (beforeEvent.defaultPrevented) {\n                        deleteHandler(index);\n                    }\n                }\n                // 删除操作处理器\n            function deleteHandler(index) {\n                    // 执行操作\n                    resoure[modelName].delete([model[dataSourceName][index][primaryKeyField]]).success(function(datalist) {\n                        response.success = true;\n                        response.data = model[dataSourceName][index];\n                        model[dataSourceName].splice(index, 1);\n                    }).error(function(msg) {\n                        response.success = false;\n                        response.data = msg;\n                    }).then(function() {\n                        // 广播该模型的save操作\n                        response.optype = optype.DELETED;\n                        broadcast(Event.MODEL_OPERATION, response);\n                    });\n                }\n                /**\n                 * Define a trigger of batch remove the operating.\n                 * 负责派发BATCH_REMOVING事件\n                 * 注意：如果该事件被标识为已处理，则直接触发批量删除操作\n                 */\n                // 标记已选中的实体对象，并存放到对应实体对象模型中的selectedItems属性中\n            function markSelectedHandler(selectedItem) {\n                    var exists = model[selectedItems].indexOf(selectedItem);\n                    if (exists < 0) {\n                        model[selectedItems].push(selectedItem);\n                    } else {\n                        model[selectedItems].splice(exists, 1);\n                    }\n                }\n                // 批量删除触发器\n            function batchRemoveHandler() {\n                    response.optype = optype.BATCH_REMOVING;\n                    var beforeEvent = broadcast(Event.MODEL_OPERATION, response);\n                    if (beforeEvent.defaultPrevented) {\n                        batchDeleteHandler();\n                    }\n                }\n                // 批量删除操作\n            function batchDeleteHandler() {\n                    // 是否继续\n                    if (model[selectedItems].length === 0) return;\n                    // 标记操作类型\n                    response.optype = optype.DELETED;\n                    // 整理待删除的数据list\n                    var idx = [];\n                    angular.forEach(model[selectedItems], function(selectedItem) {\n                        if (selectedItem.hasOwnProperty(primaryKeyField)) idx.push(selectedItem[primaryKeyField]);\n                    });\n                    // 执行操作\n                    resoure[modelName].delete(idx).success(function(datalist) {\n                        // 更新列表\n                        angular.forEach(model[selectedItems], function(item) {\n                            var index = model[dataSourceName].indexOf(item);\n                            model[dataSourceName].splice(index, 1);\n                        });\n                        // 复位选中列表\n                        model[selectedItems] = [];\n                        // 返回值赋值操作\n                        response.success = true;\n                        response.data = datalist;\n                    }).error(function(msg) {\n                        // 返回值赋值操作\n                        response.success = false;\n                        response.data = msg;\n                    }).then(function() {\n                        model[selectedItems] = [];\n                        // 广播该模型的save操作\n                        broadcast(Event.MODEL_OPERATION, response);\n                    });\n                }\n\n                /**\n                 * 2015-02-27 by wizaliu\n                 * 在模型上添加query方法，传入一个json对象，配置分页的条件（page、rows），并且可以重新配置wherestr条件\n                 */\n            function queryDataHandler(c) {\n                    var paginObj = c.pagination || undefined,\n                        queryObj = c.wherestr || resoure[modelName].wherestr || {};\n                    try{\n                        //try to delete count property,if it has\n                        delete(queryObj.count);  \n                    }catch(e){}\n                    \n                    if (paginObj){\n                        var page = paginObj.page;\n                        var rows = paginObj.rows;\n                        var limit = rows;\n                        var skip = (page-1)*rows;\n                        \n                        queryObj.limit = limit;\n                        queryObj.skip = skip;\n                    } else {\n                        delete(queryObj.limit);\n                        delete(queryObj.skip);\n                    }\n\n                    resoure[modelName].query(queryObj).success(function(data) {\n                        model[dataSourceName] = data;\n                        response.success = true;\n                        broadcast(Event.MODEL_LOADED, response);\n                    }).error(function(msg) {\n                        broadcast(Event.MODEL_LOADED, response);\n                    });\n\n                    //if pagination is defined,then query count\n                    if (paginObj){\n                        queryObj.count = true;\n\n                        resoure[modelName].query(queryObj).success(function(data) {\n                            resoure[modelName+'Count'] = data.count;\n                            broadcast(Event.MODEL_LOADED, response);\n                        }).error(function(msg) {\n                            broadcast(Event.MODEL_LOADED, response);\n                        });\n                    }\n                }\n\n                /**\n                 * 对已编辑的实体对象或已放弃编辑的实体对象进行复位操作\n                 */\n            function resetHandler() {\n                model[modelName] = null;\n                response.optype = optype.RESET;\n                broadcast(Event.MODEL_OPERATION, response);\n            }\n        }\n        /**\n         * Sign up for a sub module of the phoebe on the angular.\n         * - Provide common controller.\n         */\n    angular.module('phoebe.controller', []).service('PhoebeController', phoebeControllerService);\n    /**\n     * Registered the HTTP request service on the phoebe.\n     * @type {string[]}\n     */\n    phoebeControllerService.$inject = ['PhoebeDict', 'PhoebeResource', '$q'];\n\n    function phoebeControllerService(PhoebeDict, PhoebeResource, $q) {\n        /**\n         * Broadcast an event on the $scope.\n         * @param type : The Event type provided by the 'Event' variables.\n         * @param data : Portability data by event.\n         */\n        function broadcastEvent(type, data) {\n                if (angular.isDefined(scope)) return scope.$broadcast(type, data);\n            }\n            /**\n             * Define a method of the preloading.\n             * The parameter of the 'key', now allow the two values, They are 'dict' and 'options'.\n             * - The 'dict' parameter means to preload many dictionaries data.\n             * - The 'options' parameter means to preload many options data.\n             * The parameter of the 'config', This is a configuration information.\n             * - Different 'key' has different configuration format.\n             * @param key\n             * @param config\n             */\n        function preload(key, config) {\n                // 如果未同时传入键名和配置参数，将终止执行本次预加载过程\n                if (!angular.isDefined(key) || !angular.isDefined(config)) return;\n                // 分支判断，目前仅仅支持数据字典与下拉选单的预加载过程\n                switch (key) {\n                    case 'dict':\n                        loadingDictionary(config, PhoebeDict, dataProvider, broadcastEvent);\n                        break;\n                    case 'options':\n                        loadingOptionData(config, PhoebeResource, $q, dataProvider, resoure, broadcastEvent);\n                        break;\n                }\n            }\n            /**\n             * Define a method to create the model object.\n             * @param modelName\n             * @param config\n             */\n        function createModel(modelName, config) {\n                // 如果两个参数都不存在，则不执行创建过程\n                if (!angular.isDefined(modelName) || !angular.isDefined(config)) return;\n                // 如果配置参数中，没有model属性，则不执行创建过程\n                if (config.hasOwnProperty('model')) {\n                    var primaryKeyField = (config.hasOwnProperty('PK')) ? config.PK : 'id';\n                    // 为将要创建的实体模型对象，定义引用名\n                    var dataSourceName = modelName + 'DataSource'; // 为缓存的实体模型对象的列表数据，定义引用名\n                    var selectedItems = modelName + 'SelectedItems'; // 为缓存被选中的实体模型对象数据，定义引用名\n                    // 为将要创建的实体模型对象及其数据，创建缓存容器\n                    model[modelName] = {}; // 初始化可编辑的实体对象\n                    model[dataSourceName] = []; // 初始化第一次查询的实体对象列表，作为该实体模型对象的数据源\n                    model[selectedItems] = []; // 初始化被选中的实体对象列表\n                    // 为modelName，创建可调用服务端资源服务对象\n                    var modelResource = new PhoebeResource(config.model, primaryKeyField);\n                    // 是否有创建实体模型自定义接口的需要?\n                    if (config.hasOwnProperty('interface')) {\n                        // 判断是配置了一个还是多个自定义接口\n                        var isMultiple = angular.isArray(config.interface);\n                        // 在实体对象模型资源对象中注册自定义接口\n                        if (isMultiple) {\n                            angular.forEach(config.interface, function(face) {\n                                modelResource.setInterface(face);\n                            });\n                        } else {\n                            modelResource.setInterface(config.interface);\n                        }\n                    }\n                    // 为创建号的实体对象的资源对象的第一次请求，拼接请求条件\n                    var wherestr = (config.hasOwnProperty('wherestr')) ? config.wherestr : undefined;\n                    // 定义请求返回的响应数据\n                    var response = {\n                        model: modelName,\n                        success: false\n                    };\n\n                    //if pagination is defined, then add pagination condition\n\n                    if (config.hasOwnProperty('pagination')){\n                        var page = config.pagination.page;\n                        var rows = config.pagination.rows;\n                        var limit = rows;\n                        var skip = (page-1)*rows;\n                        if (limit && skip !== undefined){\n                            wherestr.limit = limit;\n                            wherestr.skip = skip;\n                        }\n                    }\n\n                    // 执行查询\n                    modelResource.query(wherestr).success(function(datalist) {\n                        // 赋值操作\n                        model[dataSourceName] = datalist;\n                        // 缓存该模型的资源服务对象\n                        resoure[modelName] = modelResource;\n                        // 自动创建view层可调用的操作方法\n                        createCrudMethod(resoure, modelName, dataSourceName, selectedItems, model, dataProvider, broadcastEvent, primaryKeyField);\n                        // 返回结果赋值\n                        response.success = true;\n                        // 派发模型创建结束事件\n                        broadcastEvent(Event.MODEL_LOADED, response);\n                    }).error(function(msg) {\n                        broadcastEvent(Event.MODEL_LOADED, response);\n                    });\n\n                    //if pagination is defined, then query count\n                    if (config.hasOwnProperty('pagination')){\n                        wherestr.count = true;\n                        modelResource.query(wherestr).success(function(result) {\n                            resoure[modelName+'Count'] = result.count;\n                            response.success = true;\n                            // 派发模型创建结束事件\n                            broadcastEvent(Event.MODEL_LOADED, response);\n                        }).error(function(msg) {\n                            broadcastEvent(Event.MODEL_LOADED, response);\n                        });\n                    }\n\n                }\n            }\n            /**\n             * Define some open interface.\n             * @param a\n             * @returns {*}\n             */\n        var scope,\n            dataProvider,\n            model,\n            resoure;\n        // The constructor.\n        function openInterface(scopeSource) {\n                // 确认是否是scope对象\n                if (angular.isObject(scopeSource) && scopeSource.hasOwnProperty('$id')) {\n                    // 在scope对象中，创建三个容器，以用于缓存controller中所需的数据源与可调用方法\n                    scope = scopeSource;\n                    dataProvider = scope.$dataProvider = {}; // 数据源对象，用于存放缓存的字典项与下拉选单数据\n                    model = scope.$model = {}; // 缓存得到的服务端资源对象，该类对象统称为实体模型对象\n                    resoure = scope.$resoure = scope.$resource = {}; // 实体模型对象提供的可调用服务端接口\n\n                }\n            }\n            // 将Controller中所派发的事件类型，以静态常量的方式开放\n        angular.forEach(Event, function(value, key) {\n            openInterface.prototype[key] = value;\n        });\n        // 将Controller中,创建的实体模型对象，所使用的操作类型以静态产量的方式开放\n        openInterface.prototype.optype = optype;\n        // 开放预加载接口.\n        openInterface.prototype.preload = function(key, config) {\n            preload(key, config);\n            return this;\n        };\n        // 开放创建实体模型接口\n        openInterface.prototype.createModel = function(model, config) {\n            createModel(model, config);\n            return this;\n        };\n        // return.\n        return openInterface;\n    }\n})(window, window.angular, undefined);","/**\n * Created by felix on 10/30/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n\n(function(window, angular, undefined){\n\n    /**\n     * Define ome of the variables.\n     * dictCache : The cache pool.\n     * dictResource : Define the dict service.\n     * includeName : When the query, the use of the relationship.\n     * dictForeignKey: The use of foreign keys.\n     * keyField: The use of key's field.\n     * valueField: The use of value's field.\n     * @type {{}}\n     */\n\n    var dictCache = {},\n        dictResource,\n        dictForeignKey = 'dict',\n        optionsField = 'dictoptions',\n        keyField = 'key',\n        valueField = 'value';\n\n    /**\n     * Began to load the data dictionary.\n     * @param dictlist\n     * @returns {*}\n     */\n    function loadDataDictionary(dictlist){\n        var existingList = [];\n        // Whether or not to continue\n        if(!angular.isArray(dictlist))\n            return {err: \"To load the data dictionary are failure!\"};\n        // Tectonic conditions.\n        var querylist = [];\n        angular.forEach(dictlist, function(item){\n            // existing\n            if(hasOwnDictionary(item)){\n                existingList.push(dictCache[item]);\n            }else{\n                // save query.\n                querylist.push(item);\n            }\n        });\n        // Whether or not to continue\n        if(!dictResource)\n            return errorHandler(\"The resource of the dictionary is \\\"undefined\\\".\");\n        // do query.\n        var promise;\n        if(querylist.length){\n            promise = dictResource.queryKey(null, querylist);\n            promise.then(function(list){\n                // To cache.\n                angular.forEach(list.data, function(item){\n                    dictCache[item[dictForeignKey]] = item;\n                });\n                // To join existing.\n                if(existingList.length){\n                    angular.forEach(existingList, function(item){\n                        list.data[item[dictForeignKey]] = item;\n                    });\n                }\n                return list;\n            });\n        }else{\n            promise = {\n                success: function(fun){\n                    fun(existingList);\n                    return promise;\n                },\n                error: function(fun){\n                    fun(existingList);\n                    return promise;\n                }\n            };\n        }\n\n        return promise;\n    }\n\n    /**\n     * Get a dictionary entry value.\n     * @param dict\n     * @param value\n     * @param showfield\n     * @returns {*}\n     */\n    function getDictionaryValue(dict, val, showfield){\n        var result;\n        // To display the field.\n        if(!angular.isDefined(showfield)) showfield = valueField;\n        // The options list.\n        if(hasOwnDictionary(dict)){\n            var opts = dictCache[dict][optionsField];\n            // found value.\n            for (var i = 0; i < opts.length; i++) {\n                if (opts[i][keyField] == val) {\n                    result = opts[i][showfield];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * The value of the dictionary entry exists.\n     * @param dictName\n     * @returns {*}\n     */\n    function hasOwnDictionary(dictName){\n        if(!dictName || dictName === '')\n            return errorHandler(\"The name of the dictionary is \\\"undefined\\\".\");\n        else\n            return dictCache.hasOwnProperty(dictName);\n    }\n\n    /**\n     * The error handler.\n     * @param msg\n     * @returns {{error: *}}\n     */\n    function errorHandler(msg){\n        return {error: msg};\n    }\n\n    /**\n     * Sign up for a sub module of the phoebe on the angular.\n     * - Provide common dict.\n     */\n\n    angular.module('phoebe.dict', []).\n        factory('PhoebeDict', PhoebeDictFactory).\n        filter('dictFormat' , dictFormatFilter);\n\n    /**\n     * Registered the dict option operation's service on the phoebe.\n     * @type {string[]}\n     */\n    PhoebeDictFactory.$inject = ['$phoebe', 'PhoebeResource'];\n    function PhoebeDictFactory ($phoebe, PhoebeResource) {\n        // Whether or not to continue\n        if(!$phoebe.hasOwnProperty('dict'))\n            return errorHandler(\"Phoebe load failure!\");\n        // When phoebe start, Get the configuration information.\n        var dictConfig     = $phoebe.dict;\n\n        if(dictConfig.hasOwnProperty('modelName')){\n            dictResource       = new PhoebeResource('/' + dictConfig.modelName);\n            dictResource.setInterface({\n                queryKey: {\n                    method: 'post'\n                }\n            });\n        }\n\n        if(dictConfig.hasOwnProperty('foreignKey'))\n            dictForeignKey = (dictConfig.foreignKey) ? dictConfig.foreignKey : dictForeignKey;\n\n        if(dictConfig.hasOwnProperty('optionsField'))\n            optionsField = (dictConfig.optionsField) ? dictConfig.optionsField : optionsField;\n\n\n        if(dictConfig.hasOwnProperty('keyField'))\n            keyField = (dictConfig.keyField) ? dictConfig.keyField : keyField;\n\n        if(dictConfig.hasOwnProperty('valueField'))\n            valueField = (dictConfig.valueField) ? dictConfig.valueField : valueField;\n\n        /**\n         * The dictionary preloading method.\n         * - The new load will be cached.\n         * - If there are loaded, don't send the new request.\n         * @param dictlist\n         * @returns {*}\n         */\n        this.preload = function (dictlist){\n            if(angular.isString(dictlist))\n                dictlist = [dictlist];\n            return loadDataDictionary(dictlist);\n        };\n\n        /**\n         * Get the specified dictionary.\n         * @param dict\n         * @returns {*}\n         */\n        this.getDict = function (dict){\n            if(hasOwnDictionary(dict))\n                return dictCache[dict];\n            else\n                return this.preload(dict);\n        };\n\n        /**\n         * Get a dictionary value.\n         * - Support to get the value of the specified field.\n         * - Default to get the 'value' field's value.\n         * @param dict\n         * @param value\n         * @param showfield\n         * @returns {string}\n         */\n        this.getDictValue = function (dict, value, showfield){\n            var result;\n            // existing\n            if(hasOwnDictionary(dict))\n                result = getDictionaryValue(dict, value, showfield);\n            else\n                result = errorHandler('Not found the value of \\\"' + value + '\\\" on the \\\"' + dict + '\\\"!');\n            //\n            return result;\n        };\n        /**\n         *\n         */\n        this.getForeignKey = function(){\n          return dictForeignKey;\n        };\n        // return.\n        return this;\n    }\n\n    /**\n     * The dictionary item filter.\n     * @type {string[]}\n     */\n    dictFormatFilter.$inject = [];\n    function dictFormatFilter () {\n        return function (val, dict, showfield) {\n            if(!val || !dict)\n                return val;\n            var result = getDictionaryValue(dict, val, showfield);\n            return (result) ? result : val;\n        };\n    }\n\n})(window, window.angular);","/**\n * Created by felix on 10/20/14.\n * All rights reserved, unauthorized use is strictly prohibited!!!\n */\n(function (window, angular, undefined) {\n    'use strict';\n    /**\n     * General format request method.\n     * - According to the feature of the loopback,\n     * processing to send the request.\n     * @param wherestr\n     * @returns {string}\n     */\n    function formatWhereString(wherestr) {\n        var str = '';\n\n        // contact foreignKey id.\n        if (wherestr.hasOwnProperty('fkid') && angular.isString(wherestr.fkid)) {\n            str += '/' + wherestr.fkid;\n        }\n        // contact One-to-many associative table.\n        if (wherestr.hasOwnProperty('hasmany') && angular.isString(wherestr.hasmany)) {\n            //str += '/'+ inflectionPluralize(wherestr.hasmany);\n            str += '/' + wherestr.hasmany;\n        }\n        // The where string concatenation.\n        if (angular.isDefined(wherestr.where)) {\n            var logic = 'and';\n            if (angular.isDefined(wherestr.where.logic)) {\n                if (wherestr.where.logic === 'and') logic = 'and';\n                if (wherestr.where.logic === 'or') logic = 'or';\n            }\n            var count = 0;\n            angular.forEach(wherestr.where, function (val, key) {\n                if (key !== 'logic') {\n                    str += (str.indexOf('?') === -1) ? '?' : '&';\n                    if (Object.keys(wherestr.where).length === 1) {\n                        //如果是查询总数的wherestr，则每一个where条件要写成\"[where][xxx]=xxx\"的形式\n                        //如果不是查询总数的wherestr，则每个where条件要写成\"filter[where][xxx]=xxx\"的形式\n                        if (wherestr.count) {\n                            str += 'where[' + key + ']=' + val;\n                        } else {\n                            str += 'filter[where][' + key + ']=' + val;\n                        }\n                    } else {\n                        if (wherestr.count) {\n                            str += 'where[' + logic + '][' + count + '][' + key + ']=' + val;\n                        } else {\n                            str += 'filter[where][' + logic + '][' + count + '][' + key + ']=' + val;\n                        }\n\n                    }\n                    count++;\n                }\n            });\n        }\n        // The where or eg: {or:[{fieldname: fieldval},{fieldname2:fieldval2}]}\n        if (angular.isDefined(wherestr.or) && angular.isArray(wherestr.or)) {\n            angular.forEach(wherestr.or, function (item, index) {\n                angular.forEach(item, function (val, key) {\n                    str += (str.indexOf('?') === -1) ? '?' : '&';\n                    str += 'filter[where][or][' + index + '][' + key + ']=' + val;\n                });\n            });\n        }\n        // the where and\n        if (angular.isDefined(wherestr.and) && angular.isArray(wherestr.and)) {\n            angular.forEach(wherestr.and, function (item, index) {\n                angular.forEach(item, function (val, key) {\n                    str += (str.indexOf('?') === -1) ? '?' : '&';\n                    str += 'filter[where][and][' + index + '][' + key + ']=' + val;\n                });\n            });\n        }\n        // the where not\n        if (angular.isDefined(wherestr.neq) && angular.isArray(wherestr.neq)) {\n            angular.forEach(wherestr.neq, function (item, index) {\n                angular.forEach(item, function (val, key) {\n                    str += (str.indexOf('?') === -1) ? '?' : '&';\n                    str += 'filter[where][and][' + index + '][' + key + '][neq]=' + val;\n                });\n            });\n        }\n        // The include string concatenation.\n        if (angular.isArray(wherestr.include)) {\n            angular.forEach(wherestr.include, function (item) {\n                str += (str.indexOf('?') === -1) ? '?' : '&';\n                str += 'filter[include]=' + item;\n            });\n        }\n        // The between string concatenation.\n        if (angular.isDefined(wherestr.between) && (Object.keys(wherestr.between).length > 1 && angular.isArray(wherestr.between.val))) {\n            str += (str.indexOf('?') === -1) ? '?' : '&';\n            str += 'filter[where][' + wherestr.between.field + '][between][0]=' + wherestr.between.val[0];\n            str += '&filter[where][' + wherestr.between.field + '][between][1]=' + wherestr.between.val[1];\n        }\n        // The order string concatenation.\n        if (angular.isDefined(wherestr.order)) {\n            str += (str.indexOf('?') === -1) ? '?' : '&';\n            if (angular.isDefined(wherestr.order.field)) {\n                str += 'filter[order]=' + wherestr.order.field;\n            }\n            if (angular.isDefined(wherestr.order.val)) {\n                str += ' ' + wherestr.order.val;\n            } else {\n                str += ' DESC';\n            }\n        }\n        // The limit string concatenation.\n        if (angular.isNumber(wherestr.limit)) {\n            str += (str.indexOf('?') === -1) ? '?' : '&';\n            str += 'filter[limit]=' + wherestr.limit;\n        }\n        // The skip string condition\n        if (angular.isNumber(wherestr.skip)) {\n            str += (str.indexOf('?') === -1) ? '?' : '&';\n            str += 'filter[skip]=' + wherestr.skip;\n        }\n        // The like string concatenation.\n        if (angular.isDefined(wherestr.like) && angular.isDefined(wherestr.like.field) && angular.isDefined(wherestr.like.val)) {\n            str += (str.indexOf('?') === -1) ? '?' : '&';\n            str += 'filter[where][' + wherestr.like.field + '][like]=' + wherestr.like.val;\n        }\n        // The lt string concatenation.\n        if (angular.isDefined(wherestr.lt) && angular.isDefined(wherestr.lt.field) && angular.isDefined(wherestr.lt.val)) {\n            str += (str.indexOf('?') === -1) ? '?' : '&';\n            str += 'filter[where][' + wherestr.lt.field + '][lt]=' + wherestr.lt.val;\n        }\n        // The gt string concatenation.\n        if (angular.isDefined(wherestr.gt) && angular.isDefined(wherestr.gt.field) && angular.isDefined(wherestr.gt.val)) {\n            str += (str.indexOf('?') === -1) ? '?' : '&';\n            str += 'filter[where][' + wherestr.gt.field + '][gt]=' + wherestr.gt.val;\n        }\n        // return wherestr.\n        return str;\n    }\n\n    /**\n     * Converting pluralize for the name of the table.\n     * - Parameters: This modelname is database table name.\n     * @param modelName ： 模型名称，通常为单数\n     */\n    function formatModelName(modelName) {\n        var reg = new RegExp('[^/]+');\n        var apiname = modelName.match(reg)[0];\n        return modelName.replace(apiname, inflectionPluralize(apiname));\n    }\n\n    // 单词进行单数转换复数\n    function inflectionPluralize(word) {\n        return inflection.pluralize(word);\n    }\n\n    /**\n     * The general method of sending concurrent request.\n     * - When all the requests are response, returns a promise object.\n     * @param $q\n     * @param vals\n     * @returns {Promise}\n     */\n    function concurrentHanler($q, vals) {\n        // Concurrent requests.\n        var promise = $q.all(vals);\n        // To define a callback for the success.\n        promise.success = function (callback) {\n            promise.then(function (reslist) {\n                var datalist = [];\n                angular.forEach(reslist, function (res) {\n                    if (res.data === '') datalist.push(res.status);\n                    else datalist.push(res.data);\n                });\n                callback(datalist);\n            });\n            return promise;\n        };\n        // To define a callback for the error.\n        promise.error = function (callback) {\n            promise.then(null, function (reslist) {\n                var errs = [];\n                angular.forEach(reslist, function (res) {\n                    errs.push(res.status);\n                });\n                callback(errs);\n            });\n            return promise;\n        };\n        return promise;\n    }\n\n    /**\n     * The general method of sending chain request.\n     * - Returns the request of the promise object.\n     * @param promise\n     * @returns {*}\n     */\n    function chainRequest(promise) {\n        promise.then(function (success) {\n            successHandler(success);\n        }, function (error) {\n            errorHandler(error);\n        });\n        return promise;\n    }\n\n    /**\n     * The success of the default response handler.\n     * - when after The success of the response to calls.\n     * @param res\n     * @returns {*}\n     */\n    function successHandler(res) {\n        return res;\n    }\n\n    /**\n     * The failure of the default response handler.\n     * - when after The failure of the response to calls.\n     * @param er\n     * @returns {string}\n     */\n    function errorHandler(er) {\n        var msg;\n        switch (er.status) {\n            case 404:\n                msg = '请求的远端服务不存在!';\n                break;\n            case 500:\n                msg = '请求的远程服务出错！';\n                break;\n        }\n        console.log('[http request error]: ' + msg);\n    }\n\n    /**\n     * Sign up for a sub module of the phoebe on the angular.\n     * - Provide common services for sent HTTP request.\n     */\n    angular.module('phoebe.httpService', []).config(configuration).factory('PhoebeHttpService', httpService);\n    /**\n     * Intercept to Send the request.\n     */\n    configuration.$inject = ['$httpProvider'];\n\n    function configuration($httpProvider) {\n        /*$httpProvider.defaults.transformRequest.push(function(data, headersGetter){\n         console.log(data);\n         return data;\n         });*/\n    }\n\n    /**\n     * Registered the HTTP request service on the phoebe.\n     * @type {string[]}\n     */\n    httpService.$inject = ['$http', '$q', '$phoebe'];\n\n    function httpService($http, $q, $phoebe) {\n        if (!$phoebe.hasOwnProperty('serverUrl')) return 'Phoebe load failure!';\n        /**\n         * 查询方法，支持单表、多表、中间表查询\n         * apistr为必传参数，类型为String. eg：'/family', '/family/count', '/family/customInterface'\n         * wherestr为可选参数, 该参数类型为Object.\n         * eg:\n         * var wherestr = {\n             *  fkid   : '5F94727343fhjdu4',\n             *  hasmany: 'car',\n             *  where  : {logic:'and', zip: 750001}          // where条件，支持并列和或者关系，个定义多个条件\n             *  between: {field: 'zip', val: ['750000', '750010']},\n             *  include: ['cars', 'members'],\n             *  order  : {field: 'clock', val:'ASC'},\n             *  limit  : 1,\n             *  like   : {field:'sex', val:'男'},\n             *  lt     : {field:'age', val:'26'},\n             *  gt     : {field:'age', val:'26'}\n             * }\n         * @param api\n         * @param wherestr\n         * @returns {*}\n         */\n        function find(apistr, wherestr) {\n            if (!angular.isString(apistr) || apistr === '') return;\n            // Concat the apiurl.\n            var apiURL = $phoebe.serverUrl + formatModelName(apistr);\n\n            if (angular.isObject(wherestr) && !angular.isArray(wherestr)) {\n                // count condition\n                if (wherestr.hasOwnProperty('count')) {\n                    apiURL += '/count';\n                }\n                apiURL += formatWhereString(wherestr);\n            }\n\n            return chainRequest($http.get(apiURL));\n        }\n\n        /**\n         * 添加记录方法，支持单条和批量添加，支持自定义接口\n         * apistr为必传参数， 类型为String. eg：'/family', '/family/count', '/family/customInterface'\n         * addlist为必传参数, 类型为Array，可传入单个或多条记录. eg: PhoebeService.create('/family', [item1, item2, item3])\n         * @param apistr\n         * @param addlist\n         * @returns {*}\n         */\n        function create(apistr, addlist) {\n            if (!angular.isString(apistr) || apistr === '') return;\n            if (!angular.isArray(addlist)) return;\n            // Concat the apiurl.\n            var apiurl = $phoebe.serverUrl + formatModelName(apistr);\n            return chainRequest($http.post(apiurl, addlist));\n        }\n\n        /**\n         * 更新记录方法，支持单条和批量更新，支持自定义接口\n         * apistr为必传参数， 类型为String. eg：'/family', '/family/customInterface'\n         * updatelist为必传参数, 类型为Array，可传入单个或多条记录. eg: PhoebeService.update('/family', [item1, item2, item3])\n         * @param apistr\n         * @param updatelist\n         * @returns {{success: success, error: error}}\n         */\n        function update(apistr, updatelist, pkfield) {\n            // start\n            if (!angular.isString(apistr) || apistr === '') return;\n            if (!angular.isArray(updatelist)) return;\n            // Concat the apiurl.\n            var apiurl = $phoebe.serverUrl + formatModelName(apistr);\n            // define a container for each request return value.\n            var vals = [];\n            // Send some of the request.\n            angular.forEach(updatelist, function (updateItem) {\n                vals.push($http.put(apiurl, updateItem));\n            });\n            return concurrentHanler($q, vals);\n        }\n\n        /**\n         * 删除记录方法，支持单条和批量更新，支持自定义接口\n         * apistr为必传参数， 类型为String. eg：'/family', '/family/customInterface'\n         * destroyIdlist为必传参数, 类型为Array，可传入单个或多条记录的ID. eg: PhoebeService.destroy('/family', [\"1111\", \"2222\", \"3333\"])\n         * @param apistr\n         * @param destroyIdlist\n         * @returns {Promise}\n         */\n        function destroy(apistr, destroyIdlist) {\n            if (!angular.isString(apistr) || apistr === '') return;\n            // Concat the apiurl.\n            var apiurl = $phoebe.serverUrl + formatModelName(apistr);\n            // Define a container for each request return value.\n            function getDestroyListPromise(removelist) {\n                // define a container for each request return value.\n                var result = [];\n                // Send some of the request.\n                angular.forEach(removelist, function (removeitem) {\n                    var poie;\n                    if (angular.isString(removeitem)) poie = $http.delete(apiurl + '/' + removeitem);\n                    else if (angular.isObject(removeitem)) poie = $http.delete(apiurl + '/' + removeitem.id);\n                    result.push(poie);\n                });\n                return result;\n            }\n\n            // Judge, by id or by wherestr.\n            if (angular.isArray(destroyIdlist)) {\n                return concurrentHanler($q, getDestroyListPromise(destroyIdlist));\n            } else if (angular.isObject(destroyIdlist)) {\n                // After the request completed of the success handler.\n                var successHandler;\n                // After the request completed of the failure handler\n                var errorHandler;\n                // Execute.\n                var promise = find(apistr, destroyIdlist);\n                // Save the callback methods;\n                promise.success = function (callback) {\n                    successHandler = callback;\n                    return promise;\n                };\n                promise.error = function (callback) {\n                    errorHandler = callback;\n                    return promise;\n                };\n                // The request processing.\n                promise.then(function (successPromise) {\n                    // Find some data to remove.\n                    var removeList = successPromise.data;\n                    // Concurrent execution delete operation.\n                    promise = $q.all(getDestroyListPromise(removeList));\n                    // To callback\n                    promise.then(function (reslist) {\n                        // To wash data.\n                        var statuslist = [];\n                        angular.forEach(reslist, function (res) {\n                            statuslist.push(res.status);\n                        });\n                        // return;\n                        successHandler(statuslist);\n                    }, function (reslist) {\n                        // To wash data.\n                        var statuslist = [];\n                        angular.forEach(reslist, function (res) {\n                            statuslist.push(res.status);\n                        });\n                        // return;\n                        errorHandler(statuslist);\n                    });\n                });\n                return promise;\n            }\n        }\n\n        function customInterface(apistr, method, isPath, wherestr, reqdata) {\n            if (!angular.isString(apistr) || apistr === '') return;\n            // Concat the apiurl.\n            var apiurl = $phoebe.serverUrl + formatModelName(apistr);\n            // Add query conditions.\n            if (angular.isObject(wherestr) && !angular.isArray(wherestr)) {\n                apiurl += formatWhereString(wherestr);\n            }\n            // send request.\n            var request;\n            if (isPath) {\n                apiurl = apiurl + '/' + reqdata;\n                switch (method.toLowerCase()) {\n                    case 'get':\n                        request = $http.get(apiurl);\n                        break;\n                    case 'put':\n                        request = $http.put(apiurl);\n                        break;\n                    case 'post':\n                        request = $http.post(apiurl);\n                        break;\n                    case 'del':\n                        request = $http.delete(apiurl);\n                        break;\n                    case 'delete':\n                        request = $http.delete(apiurl);\n                        break;\n                }\n            } else {\n                switch (method.toLowerCase()) {\n                    case 'get':\n                        request = $http.get(apiurl);\n                        break;\n                    case 'put':\n                        request = $http.put(apiurl, reqdata);\n                        break;\n                    case 'post':\n                        request = $http.post(apiurl, reqdata);\n                        break;\n                    case 'del':\n                        request = $http.delete(apiurl, reqdata);\n                        break;\n                    case 'delete':\n                        request = $http.delete(apiurl, reqdata);\n                        break;\n                }\n            }\n            // return\n            return chainRequest(request);\n        }\n\n        /**\n         * Define some open interface.\n         * 定义一些开放接口\n         * @constructor\n         */\n            // The constructor.\n        function HttpServiceFactory() {\n        }\n\n        // define find api.\n        HttpServiceFactory.find = function (api, where) {\n            return find(api, where);\n        };\n        // define create api.\n        HttpServiceFactory.create = function (api, addlist) {\n            return create(api, addlist);\n        };\n        // define update api.\n        HttpServiceFactory.update = function (api, list, pkfield) {\n            return update(api, list, pkfield);\n        };\n        // define destroy api.\n        HttpServiceFactory.destroy = function (api, destroyIdlist) {\n            return destroy(api, destroyIdlist);\n        };\n        //\n        HttpServiceFactory.customInterface = function (api, method, isPath, where, reqdata) {\n            return customInterface(api, method, isPath, where, reqdata);\n        };\n        // return.\n        return HttpServiceFactory;\n    }\n\n    /**\n     * Sign up for a sub module of the phoebe on the angular.\n     * - Converts the server-side entity object to the front of physical resources.\n     */\n    angular.module('phoebe.resource', []).factory('PhoebeResource', modelResource);\n    /**\n     * Registered the model resource service on the phoebe.\n     * @type {string[]}\n     */\n    var resourceList = {};\n\n    function hasOwnResource(url) {\n        return resourceList.hasOwnProperty(url);\n    }\n\n    modelResource.$inject = ['PhoebeHttpService'];\n\n    function modelResource(PhoebeHttpService) {\n        function clearSaveData(list, params) {\n            var clearedList = [];\n            // Start this clear.\n            angular.forEach(list, function (item) {\n                angular.forEach(params, function (param) {\n                    if (item.hasOwnProperty(param)) delete item[param];\n                });\n                clearedList.push(item);\n            });\n            // finish this clear.\n            return clearedList;\n        }\n\n        /**\n         * Define some open interface.\n         * 定义一些开放接口\n         * @param url\n         * @constructor\n         */\n            // The constructor.\n        function ResourceFactory(url, PKField) {\n            if (hasOwnResource(url)) {\n                return resourceList[url];\n            } else {\n                this.url = url;\n                this.include = null;\n                this.wherestr = null;\n                this.pkfield = (PKField) ? PKField : 'id';\n                resourceList[this.url] = this;\n            }\n        }\n\n        // Grafting prototype.\n        ResourceFactory.prototype.query = function (wherestr) {\n            // Save the data need to be cleaned.\n            if (angular.isObject(wherestr)) {\n                this.include = wherestr.include;\n                this.wherestr = wherestr;\n            }\n\n            return PhoebeHttpService.find(this.url, wherestr);\n        };\n        //\n        ResourceFactory.prototype.save = function (items) {\n            items = angular.copy(items);\n            // The cleared list.\n            if (this.include) items = clearSaveData(items, this.include);\n            return PhoebeHttpService.update(this.url, items, this.pkfield);\n        };\n        //\n        ResourceFactory.prototype.delete = function (ids) {\n            ids = angular.copy(ids);\n            return PhoebeHttpService.destroy(this.url, ids);\n        };\n        ResourceFactory.prototype.setInterface = function (config) {\n            var parent = this;\n            angular.forEach(config, function (cfg, interfaceName) {\n                parent[interfaceName] = function (wherestr, reqdata) {\n                    //\n                    var reqApiUrl = this.url + '/' + interfaceName;\n                    var methodval = (cfg.hasOwnProperty('method')) ? cfg.method : 'get';\n                    var isPathParam = (cfg.hasOwnProperty('path')) ? cfg.path : false;\n                    //\n                    return PhoebeHttpService.customInterface(reqApiUrl, methodval, isPathParam, wherestr, reqdata);\n                };\n            });\n            // 缓存\n            resourceList[this.url] = this;\n            return this;\n        };\n        return ResourceFactory;\n    }\n})(window, window.angular);"],"sourceRoot":"../src/scripts"}